
    Shamrock world dictionaries            1 Aug 2007


Similar to our type representation woes^H^H^H^Hinvariant we also
associate a value with every statically bound world variable. This is
for an important optimization that allows us to represent values
(specifically references to local resources) differently when they are
local than when they are remote. (See "refs.txt").

In order to maintain this invariant, we need to bind a valid value
whenever we bind a world variable. The following constructs bind world
variables within terms:

  expressions:
      WUnpack of var * var * 'cval * 'cexp

  values:
      Sham of var * 'cval
    | AllLam of { worlds : var list, tys : var list, vals : (var * ctyp) list, body : 'cval }
    (maybe vwunpack; but same as above)

  globals:
      PolyCode of var * 'cval * ctyp (* @ var *)

PolyCode is introduced after our dictionary invariant has expired, so
the world it binds is exempt and we do not need to consider it.
WUnpack is easy; just as with TPack and TUnpack, we store the
dictionary within the existential package, and restore it when we open
the package. AllLam is also treated the same way as with type
dictionaries: we simply add new arguments to the head of the list of
values--the dictionaries for the world arguments--and then pass those
along at AllApp time.

So the only tricky one is Sham. This is a kind of quantification over
worlds. The introduction form binds a world variable within a value
that's well formed at that world, in the form "sham w.v". Since this
value must be able to work anywhere, it must anticipate all possible
worlds that it might be used in, and make sure that at every one of
those worlds, it binds a dictionary for the world variable w.

We can't immediately bind a dictionary by wrapping v with some
construct. That's because the same value must work anywhere. But we
don't need to maintain the dictionary association invariant globally,
just "in time" for uses of the invariant.

The invariant is used at:

   * wdictfor and dictfor, whenever w appears in their arguments
   * allarrow, lams and go (during closure conversion)
   * wpack and tpack (used in closure conversion)

So, we'd never be able to establish the invariant for these:

   sham w. wdictfor(w)
   sham w. dictfor(w addr)

But that's okay because these types should be uninhabited (it turns
out that the latter actually is inhabited once we get to CPS because
the dictionary for any address is always represented the same way. But
at the IL level, these are uninhabited.)

Also,

   sham w. v<w>

where v is "AllLam {w'}.v'". We would need to compute the world
dictionary for w immediately, but no such world dictionary exists.
However, no such terms are well-typed: AllLam {w'}.v' has type
AllArrow {w'}.t', and so v<w> has type [w/w']t', which contains w as
long as t' contains w. The type of the body of a shamrock may not
mention the bound world variable. (But there are some weird cases like
when we say #1(0, v<w>), whose type does not reflect that it contains
v<w>, or if we have AllArrow{w'}.t but t does not mention w'. I don't
believe we ever generate any of these situations.)

We should, however, be able to do something in the case that the body
is a lambda. Here, we pass from the value syntax into the expression
syntax and start executing. Once we're executing, that means that the
value has been used (called) at some world and so we can now compute
the actual dictionary dynamically. For example:

    fun goto_client () =
        from client
        get alert [hello]

elaborates into something like (simplified):

    sham w.
        lam ().
          from client get alert [hello]

The 'get' that we do in the body will require a dictionary for w. But
in the dictionary translation phase we can turn this code into (this
isn't really accurate here because it would be in CPS form by this
point, etc.)

    sham w.
        lam ().
          letu wd ~ w wdict = localdict()
          from client get alert [hello]

This establishes the invariant for us. The lams construct is the only
way of embedding an expression in a value.

But, the expression isn't always situated at the same world as the
sham (w). Consider:

    sham w.
       hold_client (lam ().
                    from server get display [hello])

Here we won't be able to compute the actual dictionary for w because
we won't be executing at w. This seems pretty definitively bad.

(Maybe a nicer way to think of this is that a "sham" has as its body a
 derivation that is schematic in the world, and the name of that world
 is a "parameter", not a "variable" in the sense that it will never be
 bound to any *actual* world?)


-------------------------

Here's another idea: do a systematic transformation such that the uses
of uvars supply an argument that is the world dictionary for the current
world. Then, shamrock simply has a fat binding with both a static and
dynamic variable for the world.

Shamrock elimination is not the only way that values become valid,
though. We also have externs (but these usually pose no problem
because we can just insist that they come in whatever form is
necessary for the compiler) and put. Of course, when we happen to
have a value that needs no world binding (like an integer), we
can still take a world dictionary and not use it if we like. But this
seems sort of crappy. It would be nice instead to have uvars retain
the same meaning as before and only transform the meaning of sham
and letsham.

What I have in mind is something like, when we write

  fun goto_client () = ...
  in
  ... goto_client (); ..

we get

  letsham goto_client = sham w. lam (). ...
  in
  ... goto_client () ...

but that this is transformed (in the dictionarying phase) into
something more like

  letsham goto_client = sham w. alllam {wd : w wdict}. lam () ...
  in
  ... goto_client<wdict here> () ...

which seems reasonable and akin to what we do for type quantifiers.
But how do we type this thing?

  sham w. alllam {wd : w wdict}. lam () ...

has type

  {} allarrow {wd : ?? wdict}. unit -> ...

and this is not okay because {} does not bind a variable. Sometimes I think
it should. What would happen? The elimination form would be strange:


  G |- e : {w'}t
  G, u ~ t |- e' : C @ w
 -----------------------------------
  G |- letsham u = e in e' : C @ w

this is screwed up because the hypothesis u ~ t is nonsense with the
free variable w' within t. This seems to be a dead end. We could change
the judgment form for ~ to bind a world:

  G |- e : {w'}t
  G, w'.u ~ w'.t |- e' : C @ w
 -----------------------------------
  G |- letsham u = e in e' : C @ w

and now we require every use of u to give the (current) world as an
argument. This could certainly be implicit, since the context determines
the world:

  G  =  G', w'.u ~ w'.t, G''
 -------------------------------
  G |- u : t[w/w']  @  w

This isn't even that weird, since the dynamic semantics does in fact
parameterize valid values over a world argument.

Okay, supposing that we did this major change to {}, then we'd be able
to type

  letsham goto_client = sham w. alllam {wd : w wdict}. lam () ...
  in  ... goto_client<wdict here> () ...

because

  sham w. alllam {wd : w wdict}. lam () ...

would have type

  {w}. allarrow{wd : w wdict}. unit -> ...

which when eliminated yields

  goto_client ~ w.allarrow{wd : w wdict}. unit -> ...

and then when used

  goto_client : allarrow{wd : here wdict}. unit -> ...

and finally when applied

  goto_client<wdict here> : unit -> ...

as desired. Note that we don't touch valid values that come from put:

  put u = 3

yields

  u ~ w.int

which, although it binds a useless (static) world variable, does not
carry any runtime cost.

Still, this is tricky because the translation is not type-directed.
When we see u ~ w.int in the context what do we do? Was it bound with
a letsham or a put? We could track this in our translation by keeping
a set of letsham-bound variables. This is not the nicest thing in the
world. Another possibility would be to create a third class of
variables, so that we have  x : t @ w,  u ~ t,  z ~ w.t. This makes
the translation more uniform, but having multiple different sorts of
variables is a major headache.

Another complication is that we currently use shamrock frequently in
the belief that it is without cost. But with the translation above we
do introduce a (function call) cost. In particular, closure conversion
wraps any currently valid variables with shamrock in order to stick
them into the environment. It would be very bad (maybe even circular)
if we had to convert these shamrocks into allarrows and then closure
convert them as well! (It seems unlikely that it would get that bad
since they are always variables. But this is still worrisome.)


So, what is the proposal? During the Dict phase, the type {}A becomes
{w} (allarrow{w dict}.A). We track any binding of a uvar made by
letsham; these now have valid type w.A where w is used in A. For a use
of a valid variable that was not bound by letsham, nothing changes.
For a use of a valid variable that *was* bound by letsham, we apply
it as u<getwdict>. 

But wait--getwdict is some kind of expression that computes the
current world's dictionary? That won't work. No, instead, it should be

  u<wdictfor(here)>

since wdictfor is a value. We simply rely on the fact that we are
establishing the invariant that makes wdictfor possible.


In the Closure phase, which is the major phase that must maintain the
dictionary invariant, we have to do the following. Any time that we
bind a world variable, we'll need to maintain the wdictionary
invariant. I think this is only when we embed valid variables in
shamrocks in order to stick them in environments. What does this look
like? 


post Dict phase:

  letsham goto_client = sham w. alllam {wd : w wdict}. lam () ...
  fun f () =  goto_client<wdict server>
  in ... f ...

to create a closure for f, we gather the free uvariables. In this
case it's just goto_client:

  goto_client ~ w.alllam {w wdict}. T
  (where T is the type of the closure converted body)

we build an environment value that collects up the free variables.

  { 1 = sham w. goto_client }

note that this instantiates goto_client and its type at the hypothetical
world w. So this environment has type

  { 1 : {w} alllam {w wdict}. T }

(sorry, here curly braces are used to represent records with named fields,
 shamrocks (with embedded bound variable) and lists of arguments to alllam.
 confusing!)

Inside the body of the closure converted thing we'll project out the fields:

  val goto_client_s = #1 env
  (goto_client_s : {w} alllam {w wdict}. T  @ server)

  letsham goto_client = goto_client_s
  (goto_client ~ w.alllam {w wdict}.T)

  .. which is exactly what we want since the later uses of goto_client will
  allapply it to the right wdictionary.

So, in conclusion, closure conversion does not need to do anything
special in order to perform this translation. Sanity check: What was
the reason that closure conversion ever needed to do special things
with dictionaries? One was that it generates some uses of dictionaries,
particularly because it packs type-existentials. 


Oops, there is still a problem.
In dictionary conversion, "sham w. v" becomes "sham w. alllam {wd : w
wdict}. v". Closure conversion wants to convert alllam to take an
environment argument, which will contain all of the free variables of
the alllam. It also includes dictionaries for any static free
variables that appear (anywhere, including in the types of free
dynamic variables). But here w might be free, so we might include it
in our set. This is bad because we don't have a dictionary for w yet
(the whole point of inserting the alllam was to make it available).

A simple solution to this is that we only need to do this indirect
fvset augmentation for a type or world dictionary when there isn't
already an argument to this function that is a that very same
dictionary. Here, since alllam receives as an actual argument the
dictionary that reestablishes the dictionary invariant, we needn't
also pass that along inside the argument.. especially since we won't
have one to pass along.

