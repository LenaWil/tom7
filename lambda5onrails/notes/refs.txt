
  References                     12 Jul 2007

At the source language, it makes sense for "ref" to just be a
primitive type constructor.

    type 'a ref
    ref ~ 'a -> 'a ref
    :=  ~ 'a ref * 'a -> unit
    !   ~ 'a ref -> 'a

The trick comes with the representation and marshaling of references.
Optimally, a ref should be represented just as we would if generating
native code: in Javascript an Object with one field; in the Bytecode
an ML reference cell. When we need to marshal a reference, we should
put it in a table and instead ship the index in that table. When we
get such an index back, we should pull the reference out of the table
and use that.

But it is not so simple. At marshaling time, we know that we are
marshaling a reference, but we don't know whether it is a local
reference (represented as an Object) or a remote one (represented as
an integer index). We could

   1. Look at the ref (tag) to determine whether it is a local
      or remote reference. This means we need to tag references
      so that we can distinguish between remote and local refs,
      but also between a remote ref and a local ref to a remote
      ref, etc. If we do this, we lose our claim to be "tag-free."
      But this would clearly work.
      
   2. Always use a uniform representation of refs, be they
      local or remote. We can just use integers, knowing that
      we'll never attempt to dereference/update a reference that
      doesn't belong to us. (Different worlds would even reuse
      the same indices.) This is costly because every new reference
      is put in a global array that can never be garbage-collected,
      even if we never marshal it. However, this would also clearly
      work. 

      (However, this doesn't solve the problem for other kinds of
      local resources that we don't have control over the representation
      of: particularly, JavaScript objects like DOM nodes. It would be
      simple (annoying) to do a translation whereby every access to a
      local objects it through a reference cell, but that means a lot
      of runtime support code and an enormous waste of resources that is
      not visible to the programmer: it's one thing to say that when you
      make a reference to an object it can't ever be collected, but having
      that cost for *anything you do* is a bit extreme.)

   3. Do as in #1 but "tag-free" by making the tag part of the
      dictionary. In order for this to work, the dictionary not
      only has to tell us that the thing is a ref, but what world
      the ref resides at.

         a. We could change the type ref to be indexed by the world
            at which the ref lives. This probably has bad consequences
            unless we carry the change all the way up to the external
            language. Then what is the type of := ?
            
               := ~ 'a ref_'w * 'a -> unit

            no, of course not, because we can only set a ref when we're
            in the same world as it. So we would need a dependent validity,
            which is something I've been avoiding for a while.

         b. Have the marshaling and unmarshaling processes have a concept
            of the "current world" and use this to decide whether to
            dehydrate or reconstitute references. Of course, dictionaries
            already have the information to do this (through at and other
            type constructors that change the current world), we just
            currently throw it out. This is probably the right thing,
            although it may not be possible without runtime representation
            of worlds (?). For instance, consider this code:

              fun assign2 r x  =  r := (x, x)

            It has type

              assign2 ~ ('a * 'a) ref -> 'a -> unit

            and ought to be valid because it is essentially just an eta
            expansion of :=, which is also valid. So the code we generate
            must be able to run anywhere. But then we do

              letd <w, x> = e   (where e : <>((int * int) ref))
              in from w
                 get assign2 x 0
              end

            statically we have no idea what w will be, and yet when we
            arrive at the destination world we better have reconstituted
            the reference or else we are not going to be able to set it.

            On the other hand, if when we arrive our dictionary value
            literally reads "reference at home", then we can know to
            reconstitute it. That this will be "at home" is a dynamic
            fact that can only be recognized with some sort of dynamic
            tagging or accompanying data. This is in the form of a reified
            world value available for any static world in scope, just as
            we do with types for the purpose of marshaling.


            So, what is the idea?

            When we are marshaling and unmarshaling we have an idea (from
            dicts) of the type and world of the thing we're operating on.
            This guides the representation that we use. Usefully,
            we can choose different representations for something given
            where we are. In particular, a reference cell is always 
            marshaled as an integer. However, how we unmarshal it is
            dependent on its world. If the world is the same as the
            current one, .. HERE