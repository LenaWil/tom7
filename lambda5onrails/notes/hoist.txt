   After closure conversion, every lambda expression is closed with
   respect to value variables. The goal of the hoisting transformation
   is to lift those lambda expressions to the top level, so that they
   are refered to by code labels rather than being spelled out
   explicitly in the code. These labels are what are actually passed
   around at runtime, rather than expressions.

   Hoisting is just a matter of naming a thing and then using the name
   for that thing instead of the thing itself. This requires that the
   thing not be dependent on its context; i.e., closed.
   
   The problem is that while these lambdas are closed to dynamic
   components because of closure conversion, they are not necessarily
   composed to static components (type and world variables). We don't
   need to do closure conversion for such things (they will be erased)
   but because of our dictionary passing invariant, we would have to
   introduce dynamic dictionaries to correspond to any abstracted
   static types. This is annoying for sure, perhaps expensive, and
   possibly impossible.

   So instead, we first eliminate the need for the dictionary
   invariant by generating the actual dictionaries where needed. After
   this we can make static abstractions and applications with little
   cost.
   
   (So see undict.sml.)

   Now that undictionarying is done, hoisting is accomplished simply.
   Introduce a new value "Label l", where l is a global name for a
   piece of code. We then traverse the program. For each Lams that we
   see, we compute its free world and type variables. We then abstract
   over those, and insert that abstracted bit of code into a global
   place. The occurrence is replaced with AllApp(Label l, tys,
   worlds).

   Okay, it is not that simple. We can hoist out the code after
   abstracting it to make the term closed, but there is one more
   contextual factor, which is that typing judgments are made with
   respect to worlds. We may have:

    /\ w . hold_w lam x:int. E(...w...)

   where now the lambda (and so E) are typed at the world w. Hoisting
   this naively would produce:

   LAB = /\w'. lam x. E(...w'...)

   MAIN = /\ w . hold_w LAB<w>

   So LAB's type is      forall w'. int cont   @ ???

   It can't be at w' because the the binder for that variable is
   within the term, and it can't be at w because that isn't in scope
   either. Following the thorny garden path for a moment, the only
   remaining possibility is that we universally quantify that world as
   well:

   LAB = sham w''. /\ w'. lam x. E(...w'...)

   MAIN = /\ w. hold_w letsham u = LAB      // u ~ forall w'. int cont
                       in u<w>              // u<w> : int cont @ w

   This seems okay, but the fact that w'' and w' are not equal may cause
   problems. (Equally, the fact that w'' is not equal to some other worlds
   around could cause problems too?) For example, we might try to do
   something like

      leta x = hold_w' v
      ... f(x) ...
      
   which will only typecheck at w'.

   A straightforward variant is to not forall-quantify the world that the
   term is typed at; instead it is sham-quantified. The above example
   becomes

   LAB = sham w'. lam x. E(...w'...)
   MAIN = /\ w. hold_w letsham u = LAB    // u ~ int cont
                       in u               // u : int cont @ w

   and all is well. Or is it? Why should we believe that we can
   make any typing judgment schematic in its world?

   Consider the following:

     // start at world "home"
     extern world server
     extern val format : unit -> unit  @  server
     
     hold_server lam x. format()

   After (simplistic) closure conversion:

     ...
     hold_server pack _ as _ the <lam [x, format]. leta f : unit -> unit @ server = format 
                                                   in f (),
                                  hold_server format>

   We might translate this to:


     LAB = sham w'. lam [x,           format]. leta f = format in f ()
                          : int @ w'   : (unit -> unit) at w' @ w'

     LAB : {} ((int * ((unit -> unit) at ???)) cont)   @ wherever

     oops! The sham-bound w' would have to appear in the type under the {}, which
     is not allowed, since it is not bound by the type. (Maybe it should be??)
          []A = -forall w. A at w
          {}A = +forall w. A at w

   We can sidestep this issue in this context by not using {} but wrapping the world
   quantification into the label mechanism. So, using a new hypothetical type system,


     LAB(w') = w'. lam [x : int, format : unit -> unit at w']. 
                    leta f = format in f ()

     LAB ~ (int * (unit -> unit  at ???) cont)
       .. still not obvious what to say here; we could write

     LAB[w] : (int * (unit -> int  at w) cont) @ w
       .. that is, LAB is really a family of labels, each with a different type.
       .. or, put differently, lab is a typing judgment and value, parametric in some world.


   Then we have

     MAIN = extern world server
            extern val format : unit -> unit  @  server

            hold_server pack _ as _ the <LAB[server], hold_server format>

   everything is okay here.

   Note this had nothing to do with "extern world" and "extern val"; we could have
   equivalently written:

     /\server. lam (format' : unit -> unit  at server).
         leta format = format'
         in  ...

   ... because extern world just binds a variable with no condition that it be the
   "same" as other extern declarations for that same world.

   Now try:

   extern world server   // imports the label server, binds to a variable server
   hold_server
      lam ().
         extern val format : unit -> unit  @  server   // using world variable 'server'
         ... format ...
         "hello"

   becomes

   // (lambda is closed to values, so no need to closure convert)
   LAB[w] : unit -> string  @  w
      = extern val format : unit -> unit  @  w
        ... format ...
        "hello"

   MAIN = extern world server
          hold_server LAB[server]


   This all typechecks fine. There's something a little weird here
   though, which is that LAB[w] only "makes sense" at server (meaning
   the world label we'll link against) since it tries to import
   'format' at w. So we are making a potential problem for link-time,
   by requiring LAB to be schematic even though we "know" that format
   only exists at server. In essence, we are translating to a program
   with fiercer requirements on the environment (that format be
   available everywhere), which makes the translation easy but linking
   harder.

   Following that barbed-wire laden garden path for a moment, we will
   eventually have to generate code that runs on the various worlds.
   On each world we'll generate code for each label; there the
   parametric world is known to be that specific world. So suppose the
   worlds are
 
      server
      home

   on server we're golden. The code is

   LAB_server : unit -> string  @  server
      = extern val format : unit -> unit  @  server
        ... format ...
        "hello"

   this links because the server indeed has a format label. On the client

   LAB_home : unit -> string  @  home
      = extern val format : unit -> unit  @  client
        ... format ...
        "hello"

   this will fail to link, naturally. If we want this translation to
   work then, "fail to link" has to be non-negative behavior; we
   should detect that this code "can't exist" (= can't be called?) and
   thus,
     * not generate it at all
     * generate a stub implementation that fails

   In the first case, a link-time failure just means we don't generate
   that label. We could get a runtime failure if the label LAB ends up
   on the home world and wants to be called. For this example program
   that is impossible, and the type system should prevent such
   mistakes in general. But the type system must treat imports as
   assertions (right?) which means there are probably some links that
   *should* fail, not because of the overgeneralization we did in the
   translation, but because they assert things that are not true. For
   example:

     extern val halting_oracle : (unit -> unit) -> bool  @  client
     halting_oracle f
   
   when there is no halting oracle to link against at the client.
   (This certainly shouldn't cause a *run-time* error!)

   Not generating the code at all seems to have the same problem.

   We could possibly try to extract the assertions from the original
   program and do the code specialization with respect to those, i.e.,
   we see that there's an "extern val format @ server" and thus any
   code not at the server that mentions format is not generated. Here
   "link failures" are just specialization failures and result in
   empty/stub labels. That might work. But why overgeneralize and then
   have such trouble later? Instead it seems sensible to only generalize
   code that we need to generalize.

     (Note: The above thing might still not work. Consider

      extern world server
      extern world shop

      hold_shop lam ().
                 extern val format : unit -> unit  @  server
                 ...

      when the code is hoisted, we'll make shop the parameter
      but server will be forall quantified:

      LAB[w] = /\w'. lam (). extern val format : unit -> unit  @  w'
                             ...

      here it doesn't matter how we specialize labels because
      unless we monomorphize world arguments, we won't ever get a
      chance to consider different specific worlds for w'. The
      overgeneralization is again the problem: it's simply not the
      case that the body is parametric in the world 'server'.)

   Revisit the nature of worlds. Consider two forms of world
   expression: one is a world variable, and one is a world constant.
   We currently only have the former, meaning that

     extern world server

   binds the variable 'server' to some "actual world"--which we don't
   have the language to talk about--and

     extern val format : unit -> unit  @  server

   imports that label at a variable. Because world expressions can be
   variables, we appear to allow

     /\ w.
       lam ().
          extern val f : int  @  w
   
   that is, we can write the overgeneral code ourselves. 

   Instead "extern world" should alert us to a world constant by name.

   extern world server
   extern world server   // idempotent because it does not bind

   /\ w.
     lam ().
        extern val f : int  @  w    // won't be allowed because we 
                                    // can't hoist the import past
                                    // the binder for w.

   Now we won't consider "server" to be a free variable for hoisting
   purposes, because it has global scope. This means that some hoisted
   code will be situated at a specific world rather than polymorphic
   in every world. This allows us to generate code only for that
   world.

