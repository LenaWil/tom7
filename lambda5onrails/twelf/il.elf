
%% S5hybrid with world passing and validity context
%% (internal language for ML5)
%% Tom Murphy VII
%% 11 Jan 2006, 24 Oct 2007

%%% Natural deduction with hybrids and quantification

at  : ty -> world -> ty.            %infix none 2 at.
=>  : ty -> ty -> ty.               %infix right 8 =>.
all : (world -> ty) -> ty.
exists : (world -> ty) -> ty.
& : ty -> ty -> ty.                 %infix none 9 &.
sh : (world -> ty) -> ty.
addr : world -> ty.
unit : ty.

vv : (world -> val) -> vval.

% values are expressions, too.
value : val -> exp.
valid : vval -> val.

held : val -> val.
lam : (val -> exp) -> val.
app : exp -> exp -> exp.
pair : val -> val -> val.
fst : exp -> exp.
snd : exp -> exp.
wlam : (world -> val) -> val.
wapp : exp -> world -> exp.
const : world -> val.
1 : val.
sham : vval -> val.
pack : world -> val -> val.
unpack : exp -> (world -> val -> exp) -> exp.
% could be a derived form, but easy to translate
let : exp -> (val -> exp) -> exp.
% give world, address, and remote expression
get : world -> exp -> exp -> exp.
put : exp -> (vval -> exp) -> exp.
localhost : exp.
lets : exp -> (vval -> exp) -> exp.
leta : exp -> (val -> exp) -> exp.

%% typing judgments for expressions

mobile : ty -> type.
%mode mobile *A.

addrM : mobile (addr W).
atM  : mobile (A at W).
&M   :  mobile A -> mobile B -> 
        mobile (A & B).
allM : ({w} mobile (A w)) -> mobile (all [w] A w).
existsM : ({w} mobile (A w)) -> mobile (exists [w] A w).
shaM : mobile (sh Af).

% |- e : t @ w
of : exp -> ty -> world -> type.
% (others were forward-declared)

vvI : ({w} ofv (Vf w) (Af w) w) -> ofvv (vv Vf) Af.

% containments
ofvalue : of (value V) A W <- ofv V A W.
ofvvalid : ofv (valid V) (Af W) W <- ofvv V Af.

% rules for shamrock
shI : ofv (sham Vf) (sh Af) W <- ofvv Vf Af.

shE : of M (sh A) W ->
      ({x:vval} ofvv x A ->
         of (N x) C W) ->
      of (lets M N) C W.

oflocalhost : of localhost (addr W) W.
addrI : ofv (const W) (addr W) W'.

existsI : {A:world -> ty} % often need this annotation for Twelf's sake
          ofv V (A W') W ->
          ofv (pack W' V) (exists [w] A w) W.
existsE : of M (exists A) W ->
          ({w:world}{v:val} ofv v (A w) W ->
            of (N w v) C W) ->
          of (unpack M N) C W.

atIv : ofv (held V) (A at W') W <- ofv V A W'.
atE : of M (A at W') W ->
      ({v:val} ofv v A W' ->
	of (N v) C W) ->
      of (leta M N) C W.

unitI : ofv 1 unit W.

=>I : ofv (lam [x:val] M x) (A => B) W
     <- ({x:val} ofv x A W ->
                 of (M x) B W).
=>E : of M1 (A => B) W ->
      of M2 A W ->
      of (app M1 M2) B W.

&Iv : ofv V1 A W ->
      ofv V2 B W ->
      ofv (pair V1 V2) (A & B) W.
&E1 : of (fst M) A W <- of M (A & B) W.
&E2 : of (snd M) B W <- of M (A & B) W.

allI : ofv (wlam [w] M w) (all [w] A w) W
    <- ({w:world} ofv (M w) (A w) W).
allE : of (wapp M W') (B W') W
    <- of M (all [w] B w) W.

oflet : of M A W ->
	({y:val}{ofy : ofv y A W}
	   of (N y) C W) ->
	of (let M N) C W.

ofget : mobile A ->
	of W'R (addr W') W ->
	of M A W' ->
	of (get W' W'R M) A W.

ofput : mobile A ->
	of M A W ->
	({u:vval}{ofu:ofvv u ([w] A)}
          of (N u) C W) ->
	of (put M N) C W.

% continuation-based operational semantics

ec : type.    %name ec E.

efinish : ec.
% waiting for world addr
eget : ec -> exp -> ec.
% waiting for val
eput : ec -> (vval -> exp) -> ec.
% evaluating remotely, returning to the world
eget2 : ec -> world -> ec.
eapp1 : ec -> exp -> ec.
eapp2 : ec -> val -> ec.
ewapp : ec -> world -> ec.
efst : ec -> ec.
esnd : ec -> ec.
eleta : ec -> (val -> exp) -> ec.
eunpack : ec -> (world -> val -> exp) -> ec.
% waiting for exp to be evaluated
elet : ec -> (val -> exp) -> ec.

% wait for shamrocked value
elets : ec -> (vval -> exp) -> ec.

% E is a continuation expecting A at W
ofec : ec -> ty -> world -> type.    %name ofec WE.

ofec_efinish : ofec efinish A W.
ofec_elets : ofec E C W ->
	     ({v:vval} ofvv v A ->
	       of (N v) C W) ->
	     ofec (elets E N) (sh A) W.

ofec_eput : ofec E C W ->
	    ({v:vval} ofvv v ([w] A) ->
	      of (N v) C W) ->
	    mobile A ->
	    ofec (eput E N) A W.

ofec_elet : ofec E C W ->
            ({v:val} ofv v A W ->
              of (N v) C W) ->
            ofec (elet E N) A W.

ofec_eunpack : ({w:world}{v:val} ofv v (A w) W ->
		of (F w v) C W) ->
	       ofec E C W ->
	       ofec (eunpack E F) (exists A) W.

ofec_eget : mobile A ->
	    ofec E A W ->
	    of M A W' ->
	    ofec (eget E M) (addr W') W.

ofec_eget2 : mobile A ->
	     ofec E A W ->
	     ofec (eget2 E W) A W'.

ofec_eapp1 : ofec (eapp1 E M) (A => B) W
          <- ofec E B W
          <- of M A W.

ofec_eapp2 : ofec (eapp2 E (lam F)) A W
          <- ofec E B W
          <- ofv (lam F) (A => B) W.

ofec_ewapp : ofec (ewapp E W') (all [w] A w) W
          <- ofec E (A W') W.

ofec_efst : ofec (efst E) (A & B) W <- ofec E A W.
ofec_esnd : ofec (esnd E) (A & B) W <- ofec E B W.

ofec_eleta : ofec E C W ->
             ({x}{ofx : ofv x A W'} of (N x) C W) ->
             ofec (eleta E N) (A at W') W.

% a value is 'moval' if it has associated
% with it a vval (so it can be "lifted")

moval : world -> val -> vval -> type.

moat : moval _ (held V) (vv [_] held V).
mopair : moval W V1 V1' -> moval W V2 V2' -> 
         moval W (pair V1 V2) (vv [_] pair (valid V1') (valid V2')).
moall : ({w:world} moval W (V w) (V' w)) -> 
        moval W (wlam V) (vv [_] wlam [w] (valid (V' w))).
moexists : moval W V V' -> moval W (pack W' V) (vv [_] pack W' (valid V')).
moaddr : moval W (const M) (vv [_] const M).
mosh : moval W (sham VV) (vv [_] sham VV).
movv : moval W (valid (vv VV)) VV' <- moval W (VV W) VV'.

% in empty context
wellformed : ec -> exp -> world -> ty -> type.

wf_mach : ofec E A W -> of M A W -> wellformed E M W A.

% then operational semantics

step : world -> ec -> exp   ->   world -> ec -> exp -> type.   %name step S.

step_localhostr : step W E localhost W E (value (const W)).

step_existsp : step W E (unpack M N)  W (eunpack E N) M.
step_existsr : step W (eunpack E N) (value (pack W' V)) W E (N W' V).

step_fstr : step W (efst E) (value (pair V1 V2))  W E (value V1).
step_sndr : step W (esnd E) (value (pair V1 V2))  W E (value V2).
step_fstp : step W E (fst M)  W (efst E) M.
step_sndp : step W E (snd M)  W (esnd E) M.

step_appp : step W E (app M1 M2)  W (eapp1 E M2) M1.
step_app1 : step W (eapp1 E M) (value (lam F))  W (eapp2 E (lam F)) M.
step_app2 : step W (eapp2 E (lam F)) (value X)  W E (F X).

step_wappp : step W E (wapp M W')  W (ewapp E W') M.
step_wapp  : step W (ewapp E W') (value (wlam F))  W E (value (F W')).

step_putp : step W E (put M N)  W (eput E N) M.
step_putr : moval W V V' ->
            step W (eput E N) (value V)   W E (N V').

% in get, we switch worlds
step_getp : step W E (get W' W'R M)  W (eget E M) W'R.
step_getf : step W  (eget E M) (value (const W'))  
                 W' (eget2 E W) M. % saving the return address

step_getr : moval W' V V' ->
            step W' (eget2 E W) (value V)  W E (value (valid V')).

step_letp : step W E (let M N)  W (elet E N) M.
step_letr : step W (elet E N) (value V)  W E (N V).

step_letsp : step W E (lets M N)  W (elets E N) M.
step_letsr : step W (elets E N) (value (sham VV))  W E (N VV).

step_letap : step W E (leta M N)  W (eleta E N) M.
step_letar : step W (eleta E N) (value (held V))  W E (N V).

% we maintain the invt that when returning a value, it is
% not of the form (valid (vv _))
step_vvinst : step W E (value (valid (vv V)))  W E (value (V W)).

% we use self stepping to avoid the extra work of
% handling the finish state as terminal.
% nb this overlaps the previous
step_self : step W efinish (value V)  W efinish (value V).

% lemmas.

% closed values of mobile type are movals.
mobmov : mobile A -> ofv V A W -> moval W V V' -> type.
%mode mobmov +MOB +WV -MOV.

mobmov_addr : mobmov addrM addrI moaddr.
mobmov_at : mobmov atM (atIv _) moat.
mobmov_sh : mobmov shaM (shI _) mosh.
mobmov_& : mobmov MA WA MOA -> mobmov MB WB MOB ->
           mobmov (&M MA MB) (&Iv WA WB) (mopair MOA MOB).

mobmov_all : ({w:world} mobmov (MF w) (WF w) (MOF w)) ->
             mobmov (allM MF) (allI WF) (moall MOF).

mobmov_exists : (mobmov (MF W') WF MOF) ->
                 mobmov (existsM MF) 
                        (existsI _ WF : ofv (pack W' _) _ _) (moexists MOF).

mobmov_vvalid : mobmov (MOB : mobile (Af W)) 
                       (ofvvalid (vvI (D : {w} ofv (Vf w) (Af w) w)) : ofv _ (Af W) W)
		       (movv MOV : moval W _ _)
 <- mobmov MOB (D W) MOV.

% well-typed mobile values are valid values
momo : moval W V V' ->
       ofv V A W ->
       ofvv V' ([w] A) ->
       type.
%mode momo +MV +OV -OV'.

momovv : momo (movv MOB) (ofvvalid (vvI UV)) WVV
      <- momo MOB (UV W) WVV.

momoaddr : momo moaddr addrI (vvI [_] addrI).
momoat : momo moat (atIv M) (vvI [_] atIv M).
momosh : momo mosh (shI WVV) (vvI [_] shI WVV).

momopair : momo (mopair MV1 MV2) (&Iv OM1 OM2) 
               (vvI [w] &Iv (ofvvalid D1) (ofvvalid D2))
        <- momo MV1 OM1 D1
        <- momo MV2 OM2 D2.

momoall : momo (moall MV) (allI OM) (vvI [w'] allI ([w] ofvvalid (D w)))
       <- ({w:world}
           momo (MV w) (OM w) (D w)).

momoexists :
    momo (moexists MOV) (existsI Aw WF) (vvI [w'] (existsI _ (ofvvalid F)))
 <- momo MOV WF F.

% safety theorem
prog : wellformed E M W A ->
       step W E M  W' E' M' ->
       type.
%mode prog +WF -S.

presv : wellformed E M W A ->
        step W E M  W' E' M' ->
        wellformed E' M'  W' A' ->
        type.
%mode presv +WF +S -WF'.

%%%%%%%%%%%%%%%%%%%% 
% cases for progress 
%%%%%%%%%%%%%%%%%%%% 

prog_finish : prog (wf_mach ofec_efinish OF) step_self.

% simple, pushing
prog_getp : prog (wf_mach WE (ofget MOB WR WA)) step_getp.
prog_allEp : prog (wf_mach WE (allE WA)) step_wappp.
prog_=>Ep : prog (wf_mach WE (=>E WF WA)) step_appp.
prog_&E1p : prog (wf_mach WE (&E1 WA)) step_fstp.
prog_&E2p : prog (wf_mach WE (&E2 WA)) step_sndp.
prog_exEp : prog (wf_mach WE (existsE _ _)) step_existsp.
prog_putp : prog (wf_mach WE (ofput MOB WM WN)) step_putp.

% if rhs is validval, instantiate it
prog_vv : prog (wf_mach WE (ofvalue (ofvvalid OV))) step_vvinst.

% if rhs is value, then...
prog_&E1 : prog (wf_mach (ofec_efst WE) (ofvalue (&Iv WA WB))) step_fstr.
prog_&E2 : prog (wf_mach (ofec_esnd WE) (ofvalue (&Iv WA WB))) step_sndr.
prog_=>Ef : prog (wf_mach (ofec_eapp1 WA WE) (ofvalue _)) step_app1.
prog_=>Er : prog (wf_mach (ofec_eapp2 WF WE) (ofvalue _)) step_app2.
prog_allEr : prog (wf_mach (ofec_ewapp WE) (ofvalue _)) step_wapp.
prog_exEr : prog (wf_mach (ofec_eunpack _ _) (ofvalue _)) step_existsr.

prog_putr : prog (wf_mach (ofec_eput WE WN MOB) (ofvalue WV)) (step_putr MOV)
         <- mobmov MOB WV MOV.

prog_getf : prog (wf_mach (ofec_eget MOB WE WF) (ofvalue _)) step_getf.
prog_getr : mobmov MOB WV MOV ->
            prog (wf_mach (ofec_eget2 (MOB : mobile A)
                           (WE : ofec E A W)) 
		           (ofvalue (WV : ofv V A W'))) (step_getr MOV).

prog_localhostr : prog (wf_mach WE oflocalhost) step_localhostr.

prog_letp : prog (wf_mach WE (oflet _ _)) step_letp.
prog_leta : prog (wf_mach (ofec_elet _ _) (ofvalue WV)) step_letr.

prog_letsp : prog (wf_mach WE (shE _ _)) step_letsp.
prog_letsfv : prog (wf_mach (ofec_elets _ _) (ofvalue (shI VALID))) step_letsr.

prog_letar : prog (wf_mach (ofec_eleta WE WN) (ofvalue (atIv WV))) step_letar.
prog_letap : prog (wf_mach WE (atE _ _)) step_letap.

%%%%%%%%%%%%%%%%%%%%%%%% 
% cases for preservation
%%%%%%%%%%%%%%%%%%%%%%%% 

presv_self : presv (wf_mach ofec_efinish OF) step_self (wf_mach ofec_efinish OF).
presv_fstr : presv (wf_mach (ofec_efst WE) (ofvalue (&Iv WA WB))) step_fstr 
                   (wf_mach WE (ofvalue WA)).
presv_sndr : presv (wf_mach (ofec_esnd WE) (ofvalue (&Iv WA WB))) step_sndr 
                   (wf_mach WE (ofvalue WB)).
presv_getp : presv (wf_mach WE (ofget MOB WFR WT)) step_getp 
                   (wf_mach (ofec_eget MOB WE WT) WFR).
presv_getf : presv (wf_mach (ofec_eget MOB WE WT) (ofvalue addrI)) step_getf
                   (wf_mach (ofec_eget2 MOB WE) WT).

presv_getr : momo MOV WV VALID ->
             presv (wf_mach (ofec_eget2 (MOB : mobile A) 
                            (WE : ofec E A W)) (ofvalue (WV : ofv _ A W')))
                   (step_getr (MOV : moval _ _ _))
                   (wf_mach WE (ofvalue (ofvvalid VALID))).

presv_putp : presv (wf_mach (WE : ofec E C W) (ofput MOB (WM : of M A W) WN)) step_putp
                   (wf_mach (ofec_eput WE WN MOB) WM).
presv_putr : momo MOV WV VALID ->
             presv (wf_mach (ofec_eput WE WN MOB) (ofvalue WV)) (step_putr MOV)
                   (wf_mach WE (WN _ VALID)).
presv_fstp : presv (wf_mach WE (&E1 WP)) step_fstp
                   (wf_mach (ofec_efst WE) WP).
presv_sndp : presv (wf_mach WE (&E2 WP)) step_sndp
                   (wf_mach (ofec_esnd WE) WP).
presv_appp : presv (wf_mach WE (=>E WF WA)) step_appp
                   (wf_mach (ofec_eapp1 WA WE) WF).
presv_app1 : presv (wf_mach (ofec_eapp1 WA WE) (ofvalue WF)) step_app1
                   (wf_mach (ofec_eapp2 WF WE) WA).
presv_app2 : presv (wf_mach (ofec_eapp2 (=>I WF) WE) (ofvalue WA)) step_app2
                   (wf_mach WE (WF X WA)).
presv_existsp : presv (wf_mach WE (existsE WM WN)) step_existsp
                      (wf_mach (ofec_eunpack WN WE) WM).

presv_existsr : presv (wf_mach (ofec_eunpack WN WE)
                               (ofvalue (existsI _ WA))) 
                      (step_existsr : step _ _ (value (pack W V)) _ _ _)
                      (wf_mach WE (WN W V WA)).

presv_wapp : presv (wf_mach (ofec_ewapp WE) (ofvalue (allI WF))) 
                   (step_wapp : step _ (ewapp _ W) _ _ _ _)
                   (wf_mach WE (ofvalue (WF W))).

presv_wappp : presv (wf_mach WE (allE WF)) step_wappp
                    (wf_mach (ofec_ewapp WE) WF).

presv_localhost : presv (wf_mach WE oflocalhost) step_localhostr
                        (wf_mach WE (ofvalue addrI)).
presv_letp : presv (wf_mach WE (oflet WM WN)) step_letp
                   (wf_mach (ofec_elet WE WN) WM).
presv_letr : presv (wf_mach (ofec_elet WE WN) (ofvalue WV))
                   step_letr (wf_mach WE (WN _ WV)).
presv_letsp : presv (wf_mach WE (shE WM WN)) step_letsp
                    (wf_mach (ofec_elets WE WN) WM).
presv_letsr : presv (wf_mach (ofec_elets WE WN) (ofvalue (shI WV)))
                    step_letsr (wf_mach WE (WN _ WV)).
presv_letap : presv (wf_mach WE (atE WM WN)) 
                    step_letap (wf_mach (ofec_eleta WE WN) WM).
presv_letar : presv (wf_mach (ofec_eleta WE WN) (ofvalue (atIv WV)))
                    step_letar (wf_mach WE (WN _ WV)).
presv_vvinst : presv (wf_mach WE (ofvalue (ofvvalid (vvI WVV)))) step_vvinst
               (wf_mach WE (ofvalue (WVV _))).

%block blockwewe : some {A : ty}{W : world}{W' : world}
                   block {x:exp}{OX : of x A W}{OX' : of x A W'}.

%worlds (blockw | blockwewe) (momo _ _ _).
%total [A B] (momo A B _).

%worlds (blockw | blockwewe) (presv WF S WF').
%total S (presv WF S WF').

%worlds (blockw) (mobmov _ _ _).
%total [WV MOB] (mobmov MOB WV _).

%worlds (blockw) (prog WF S').
%total WF (prog WF S').
