
% CPS Conversion.                               2 Oct 2006

% Again, given on typing derivations. This builds the type-correctness
% of the translation into the argument.

% boring equality lemmas.
ceqtyp : ctyp -> ctyp -> type.
ceqtyp_ : ceqtyp A A.

% equality is preserved under constructors
ceqtyp_& : ceqtyp A A' -> ceqtyp B B' -> ceqtyp (A c& B) (A' c& B') -> type.
%mode ceqtyp_& +A +B -C.
- : ceqtyp_& ceqtyp_ ceqtyp_ ceqtyp_.

ceqtyp_cont : ceqtyp A A' -> ceqtyp (A ccont) (A' ccont) -> type.
%mode ceqtyp_cont +A -C.
- : ceqtyp_cont ceqtyp_ ceqtyp_.

cofv_resp : cofv C A -> ceqtyp A A' -> cofv C A' -> type.
%mode cofv_resp +COF +EQ -COF'.
- : cofv_resp D ceqtyp_ D.



% convert an IL type to a CPS type.
ttoct : typ -> ctyp -> type.                      %name ttoct TTOCT ttoct.
%mode ttoct +T -CT.


ttoct/=> : ttoct (A => B) ((A' c& (B' ccont)) ccont) 
	     <- ttoct B B' <- ttoct A A'.
ttoct/unit : ttoct unit cunit.
ttoct/& : ttoct (A & B) (A' c& B') <- ttoct B B' <- ttoct A A'.

% sanity check
%worlds () (ttoct _ _).
%total D (ttoct D _).

% it has to have unique outputs.
ttoct_fun : ttoct A A' -> ttoct A A'' -> ceqtyp A' A'' -> type.
%mode ttoct_fun +X +Y -Z.

- : ttoct_fun (ttoct/& A B) (ttoct/& C D) OUT
 <- ttoct_fun A C EQ1
 <- ttoct_fun B D EQ2
 <- ceqtyp_& EQ1 EQ2 OUT.

- : ttoct_fun (ttoct/=> A B) (ttoct/=> C D) OUT
 <- ttoct_fun A C EQ1
 <- ttoct_fun B D EQ2
 <- ceqtyp_cont EQ2 EQ3
 <- ceqtyp_& EQ1 EQ3 EQ4
 <- ceqtyp_cont EQ4 OUT.

- : ttoct_fun ttoct/unit ttoct/unit ceqtyp_.

% moreover, it must be defined for all inputs
ttoct_gimme : {A:typ} {A':ctyp} ttoct A A' -> type.
%mode ttoct_gimme +A -A' -D.

- : ttoct_gimme (A & B) _ (ttoct/& CT1 CT2)
 <- ttoct_gimme A A' CT1
 <- ttoct_gimme B B' CT2.

- : ttoct_gimme (A => B) _ (ttoct/=> CT1 CT2)
 <- ttoct_gimme A A' CT1
 <- ttoct_gimme B B' CT2.

- : ttoct_gimme unit cunit ttoct/unit.

%worlds () (ttoct_fun _ _ _) (ceqtyp_& _ _ _) (ceqtyp_cont _ _).

%total D (ceqtyp_& D _ _).
%total D (ceqtyp_cont D _).
%total D (ttoct_fun D _ _).

tocps- : {M  : exp}
	 {WM : of M A}
 	 {CT : ttoct A CA}
	 % this term represents the result of conversion.
	 % it takes a continuation with a hole for the
         % translated result and fills it in.
	 {CC : (cval -> cexp) -> cexp}
	 % this derivation types the result of conversion:
	 % All well-formed instantiations of CC are well-formed.
         % For C to be a well-formed instantiation, it must
         % itself be well-typed for all appropriate arguments.
	 ({C : cval -> cexp}
	  ({cv : cval}
	   {wcv : cofv cv CA}
	   cof (C cv)) ->
	  % result of course can depend on C
	  cof (CC C)) ->
	 type.
%mode tocps- +M +WM -CT -CC -K.

% need this because Twelf doesn't understand that ttoct is
% a function. Reverse the polarity!
tocps+ : {M  : exp}
	 {WM : of M A}
 	 {CT : ttoct A CA}
	 {CC : (cval -> cexp) -> cexp}
	 ({C : cval -> cexp}
	  ({cv : cval}
	   {wcv : cofv cv CA}
	   cof (C cv)) ->
	  cof (CC C)) ->
	 type.
%mode tocps+ +M +WM +CT -CC -K.

% well-formedness of continuation must respect equality on
% CPS types, for reverse-the-polarity trick.
k_resp :  {K :
	   ({C  : cval -> cexp}
	    ({cv : cval}
	     {wcv : cofv cv A}
	     cof (C cv)) ->
	    cof (CC C))}

          {EQ : ceqtyp A A'} 

          {K' :
	   ({C  : cval -> cexp}
	    ({cv : cval}
	     {wcv : cofv cv A'}
	     cof (C cv)) ->
	    cof (CC C))}

          type.
%mode k_resp +K +EQ -K'.

k_resp_ : k_resp D ceqtyp_ D.


tocps+/- : tocps+ V WV CTi CC K
        <- tocps- V WV CTo CC K'
        <- ttoct_fun CTo CTi EQ
        <- k_resp K' EQ K.

% values are translated with a more standard-looking relation
tocpsv+ : {WV  : ofv V A}
	  {CT  : ttoct A CA}
	  {WCV : cofv CV CA}
	  type.
%mode tocpsv+ +WV +CT -WCV.

tocpsv- : {WV  : ofv V A}
	  {CT  : ttoct A CA}
	  {WCV : cofv CV CA}
	  type.
%mode tocpsv- +WV -CT -WCV.

tocpsv+/- : tocpsv+ WV CTi WCV'
	 <- tocpsv- WV CTo WCV
	 <- ttoct_fun CTo CTi EQ
	 <- cofv_resp WCV EQ WCV'.

c_val : tocps- (value V) (ofvalue WV) CT _ ([c][wc] wc CV WCV)
     <- tocpsv- WV CT WCV.

c_mkpair : tocps- (mkpair M1 M2) (&I WM1 WM2) (ttoct/& CT1 CT2) _
	      ([c][wc] 
		  F2 _ ([v2][wv2]
			  F1 _ ([v1][wv1]
				 co_mkpair wv1 wv2 wc)))
	<- tocps- M1 WM1 CT1 _ F1
	<- tocps- M2 WM2 CT2 _ F2.

c_fst : tocps- (fst M) (&E1 WM) CT _
	      ([c][wc]
		 F _ ([v][wv] co_fst wv wc))
     <- tocps- M WM (ttoct/& CT _) _ F.


c_snd : tocps- (snd M) (&E2 WM) CT _
	      ([c][wc]
		 F _ ([v][wv] co_snd wv wc))
     <- tocps- M WM (ttoct/& _ CT) _ F.



c_app : tocps- (app M N) (=>E WM WN) CTB _
	   ([c][wc]
	      % eval function, then argument
	      FM _ ([f][wf]
		      FN _ ([a][wa]
			      % making argument of type A' c& (B ccont)
			      co_mkpair wa (cov_lam ([r][wr] wc r wr)) [p][wp]
			      co_call wf wp)))
     <- ttoct_gimme (A => B) (A' c& (B' ccont) ccont) (ttoct/=> CTA CTB)
     <- tocps+ M WM (ttoct/=> CTA CTB) _ FM
     <- tocps+ N WN CTA _ FN.


% we just translate away lets
c_let : tocps- (let M N) (oflet WM WN) CTN _
          ([c][wc] FM _ ([v][wv] FN v wv c wc))

     <- ttoct_gimme A A' CTM
     <- tocps+ M WM CTM _ FM
     <- ttoct_gimme B B' CTN
     <- ( {x}{xof : ofv x A}
	  {x'}{x'of : cofv x' A'}
	  {thm:tocpsv- xof CTM x'of}

	 tocps+ (N x) (WN x xof) CTN (CC x') (FN x' x'of)).

cv_pair : tocpsv- (&Iv WV1 WV2) (ttoct/& CT1 CT2)  (cov_pair WV1' WV2')
       <- tocpsv- WV1 CT1 WV1'
       <- tocpsv- WV2 CT2 WV2'.

% this is essentially the crux of continuation *passing* style
cv_lam : tocpsv- ((=>I WM) : ofv (lam M) (A => B)) (ttoct/=> CTA CTB)
	  (cov_lam [arg][argof : cofv arg (A' c& (B' ccont))]
	     co_fst argof [x:cval][xof:cofv x A']
	     co_snd argof [r:cval][rof:cofv r (B' ccont)]
	     F x xof r rof ([v:cval] ccall r v) 
	        ([v:cval][wv:cofv v B'] co_call rof wv))
    <- ttoct_gimme A A' CTA
    <- ttoct_gimme B B' CTB
    <- (% original argument
	{x}{xof : ofv x A}
	{x'}{x'of : cofv x' A'}
	% how to convert it
	{thm:tocpsv- xof CTA x'of}

	% (object language) return continuation
	{r}{rof : cofv r (B' ccont)}

	  tocps+ (M x) (WM x xof) CTB (CC x' r) (F x' x'of r rof)).

cv_unit : tocpsv- unitI ttoct/unit cov_unit.


% when descending under a binding in the source language,
% we'll assume that the variable can be translated to a cps
% variable
%block blockcvar : 
	      some {A : typ} {A' : ctyp} {CTA : ttoct A A'}
	      block
	       {x}{xof : ofv x A}
	       {x'}{x'of : cofv x' A'}
               % how to convert it
	       {thm:tocpsv- xof CTA x'of}.

% Since we end up having to make worlds declarations for like cexp, we
% need these.
%block blockcv : block {v : cval}.

%block blockwcv :
             some {CA : ctyp}
             block {r}{rof : cofv r CA}.

%worlds (blockcv) (cval) (cexp).

%worlds (blockwcv) (cofv _ _) (cof _).


%worlds (blockcvar | blockwcv) 
                   (tocps+ _ _ _ _ _)
                   (tocps- _ _ _ _ _)
                   (tocpsv+ _ _ _)
                   (tocpsv- _ _ _)
                   (cofv_resp _ _ _)
                   (ttoct_gimme _ _ _)
                   (k_resp _ _ _).

%covers tocpsv- +A -B -C.
%covers tocpsv+ +A +B -C.

%covers tocps+ +M +WM +CT -CC -K.
%covers tocps- +M +WM -CT -CC -K.

%total A (cofv_resp _ A _).
%total A (k_resp _ A _).
%total A (ttoct_gimme A _ _).

%total (A B C D) 
          (tocpsv- A _ _) 
          (tocpsv+ B _ _) 
          (tocps- _ C _ _ _) 
          (tocps+ _ D _ _ _).
