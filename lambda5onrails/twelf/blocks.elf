% Forward declarations of type families and blocks.

world : type.                                       %name world W w.

% It also becomes necessary to declare modes for some things, even though
% they are not used as logic programs. World is a zero-place relation!

%mode world.

% internal language
ty  : type.                                        %name ty A a.
exp  : type.
val  : type.
vval : type.
ofv  : val -> ty -> world -> type.
ofvv : vval -> (world -> ty) -> type.

% CPS language
ctyp : type.                                        %name ctyp A a.
cval : type.                                        %name cval V v.
cvval : type.                                       %name cvval VV vv.
ttoct : ty -> ctyp -> type.                         %name ttoct TTOCT ttoct.
ttoctf : (world -> ty) -> (world -> ctyp) -> type.  %name ttoctf TTOCTF ttoctf.
cofv  : cval -> ctyp -> world -> type.              %name cofv WV wv.
cofvv : cvval -> (world -> ctyp) -> type.           %name cofvv WVV wvv.

% CPS conversion
tocpsv-  : {WV  : ofv V A W} {CT  : ttoct A CA} {WCV : cofv CV CA W} type.

tocpsvv- : {WV : ofvv V Af} {CT : ttoctf Af CAf} {WCV : cofvv CV CAf} type.

% almost everything is done with respect to hypothetical worlds
%block blockw : block {w : world}.

% when descending under a binding in the source language,
% we'll assume that the variable can be translated to a cps variable
%block blockcvar : 
              some {A : ty} {A' : ctyp} {W : world} {CTA : ttoct A A'}
              block
               {x}{xof : ofv x A W}
               {x'}{x'of : cofv x' A' W}
               % how to convert it
               {thm:tocpsv- xof CTA x'of}.

%block blockcvvar :
              some {Af : world -> ty} {Af' : world -> ctyp} {CTA : ttoctf Af Af'}
              block {x}{xof : ofvv x Af}
                    {x'}{x'of : cofvv x' Af'}
                    {thm:tocpsvv- xof CTA x'of}.

% Since we end up having to make worlds declarations for relations
% like cexp, we need these.
%block blockcv  : block {v : cval}.
%block blockcvv : block {v : cvval}.
%block blockwcv  : some {W : world} {CA : ctyp}
                   block {r}{rof : cofv r CA W}.
%block blockwcvv : some {CAf : world -> ctyp}
                   block {v}{vof : cofvv v CAf}.

% some world declarations have to be done very early.
%worlds (blockw | blockcvar | blockwcv | blockwcvv)  (world).
