
tp  : type.              %name tp A a.
=>  : tp -> tp -> tp.    %infix left 2 =>.
&   : tp -> tp -> tp.    %infix left 2 &.

exp : tp -> type.        %name exp M x.

lam : (exp A -> exp B) -> exp (A => B).

app :  exp (A => B) -> exp A -> exp B.
                         %infix left 2 app.
, : exp A -> exp B -> exp (A & B).
                         %infix left 2 ,.

% finds the appropriate evaluation context
% for some expression we want to evaluate.
find : {E : exp A}
       {ARG:tp} exp ARG -> (exp ARG -> exp A) -> type.
%mode find +EA -ARG -E -EC.

val-or-not : tp -> type.
val : exp A -> val-or-not A.
not : exp A -> val-or-not A.

%{
f0, : find (v V1 , v V2) nv,
      _ (v V1 , v V2)
      ([x] v x).

f1, : find (E1 , E2) nv,
      _ E1
      ([x] (v x , E2))
   <- not-value E1.

f2, : find (v V , (E : exp ARG)) nv,
      ARG E
      ([x:val ARG] v (V ,, x))
   <- not-value E.

f1a : find (E1 app E2) nva
      _ E1
      ([x] (v x app E2))
   <- not-value E1.

f2a : find (v (lam F) app E) nva
      _ E
      F
   <- not-value E.

%worlds () (find _ _ _ _ _).

%total D (find D _ _ _ _).

%{
can-find : {E} 
           not-value E ->
           find E A B C ->
           type.
%mode can-find +E +NV -F.

cf, : can-find ((v (V1 : val A) , v (V2 : val B)) : exp (A & B))
               nv, 
               (f0, : find (v V1 , v V2) (A & B) (v V1 , v V2) 
                           ([x : val (A & B)] v x)).

% urrr this is annoying now..             

%worlds () (can-find _ _ _).
%total D (can-find D _ _).
}%
}