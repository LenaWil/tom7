exp : type.
typ : type.
of  : exp -> typ -> type.

% so that the language is inhabited
0 : exp.
1 : exp.
; : exp -> exp -> exp.  %infix left 9 ;.
bit : typ.
void : typ.
ill : exp. % not well typed
of1 : of 1 bit.
of0 : of 0 bit.
of; : of (E1 ; E2) A <- of E1 B <- of E2 A.


% "advanced"

gen-e : {F : exp -> exp} {A : typ}
        of (F ill) A -> 
        ({y:exp} of (F X) A) ->
        type.
%mode gen-e +F +A +D -D'.

gen-e0 : gen-e _ _ of0 ([y] of0).
gen-e1 : gen-e _ _ of1 ([y] of1).
gen-e; : gen-e _ _ (of; D1 D2) ([y] of; (D1' y) (D2' y)) 
      <- gen-e _ _ D1 ([y] D1' y)
      <- gen-e _ _ D2 ([y] D2' y).

gen-i : of (F ill) A -> 
        ({y:exp} of (F y) A) ->
        type.
%mode gen-i +D -D'.

gen-i/e : gen-i D D' <- gen-e _ _ D D'.


%worlds () (gen-e _ _ _ _) (gen-i _ _).
%total F (gen-e F _ _ _).
%total D (gen-i D _).

%{
% explicit
apply-e : {f:exp -> exp} {a:typ} ({y:exp} of (f y) a) -> of (f 0) a -> type.
%mode apply-e +F +A +D -D'.

apply-e/i : apply-e F A D D' <- apply-i D D'.



% explicit
apply2-e : {f:exp -> exp} {a:typ} {x:exp} ({y:exp} of (f y) a) -> of (f x) a -> type.
%mode apply2-e +F +A +X +D -D'.

apply2-eclosed : apply2-e _ _ _ ([y] D) D.



apply2-i : ({y:exp} of (F y) A) ->
	   of (F X) A -> type.
%mode +{X:exp} +{A:typ} +{F : exp -> exp}
      +{D : {y:exp} of (F y) A} -{D' : of (F X) A} 
      apply2-i D D'.

% apply2-i/e : apply2-i D D' <- apply2-e _ _ D D'.

apply2-i/e  : apply2-i D D' <- apply2-e F A X D D'.
apply2-i/e' : apply2-i D D' <- apply2-e ([x] X) A X D D'.


%worlds  () (apply2-i _ _) (apply2-e _ _ _ _ _).
%total D (apply2-e _ _ _ D _).
%total D (apply2-i D _).

%worlds  () (apply-i _ _) (apply-e _ _ _ _).
%total D (apply-i D _).
%total D (apply-e _ _ D _).

}%