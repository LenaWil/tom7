val require-std = provide-std
val require-list = provide-list
val provide-hash = ()

type (a,b) hash = ((a -> int) * ((a * a) -> bool) * ((a * b) list array))

fun hash-new (hf, eq, size) =
    let
	val ar = array (size, nil)
    in
	(hf, eq, ar)
    end

fun hash-get ((hf, eq, h), key) =
    let
	val idx = (hf key) mod (length h)
	fun heq (a,b) =
	    eq (key, a)
	val pair = list-find heq (sub(h, idx))
        (* do print ((int-tostring idx) ^ " g\n") *)
    in
	case pair of SOME (a,b) => SOME b
		   | NONE => NONE
    end

fun hash-put ((hf, eq, h), key, value) =
    let
	val idx = (hf key) mod (length h)
	fun hne (a,b) =
	    not (eq (key, a))
	val newlist = list-filter hne (sub(h, idx))
        (* do print ((int-tostring idx) ^ " p\n") *)
    in
	update (h, idx, (key, value) :: newlist)
    end





fun string-hash a =
    let
	val fnv32-init = 0x811c9dc5
	val fnv32-prime = 0x01000193
	fun fnv32 (octet : char, hval) =
	    let
		val hval = (hval * fnv32-prime) xorb ord octet
	    in
		hval
	    end
	val hash = array-foldl fnv32 fnv32-init a
	(* do print (" hash " ^ a ^ " -> ") *)
    in
	hash
    end
