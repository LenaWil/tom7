
The representation of mutually-recursive functions within the compiler
is tricky, mainly because we need a general way of doing the Dictionary
translation for the marshalling of abstract types. A polymorphic value of
type A a. A b. A c. t(a, b, c) must be translated to 
   A a. A b. A c. a dict _> b dict _> c dict) _> t(a, b, c)
where _> is the type of the value lambda. For Val bindings, this is simple;
we just abstract the value (it must be a value if it is polymorphic) and
we are done. For Fun declarations, the situation is more subtle.

One solution, the "fat function", packs the value abstraction into the
declaration itself.
  Fun ('a, 'b) f(x : c, y : d) = exp : g
    --> f : A 'a. A 'b. (c * d) -> g

 becomes

  Fun ('a, 'b) <ad, bd> f(x : c, y : d) = exp : g
    --> f : A 'a. A 'b. 'a dict _> 'b dict) _> (c * d) -> g

 this would evidently work but is rather tasteless; now the _> type
has multiple introduction forms, it would be difficult to give an
operational semantics, etc.

Other options try to make the translation completely uniform by
eliminating the Fun declaration. The problem is then how to fit
a mutually recursive Fun declaration into a Val declaration.

One way to do this is to first bind a value that is a bundle of
mutually-recursive functions, then bind the functions themselves
as projections from that bundle.

fun ('a, 'b) f (x : t1) = e1 : t2
and          g (y : t3) = e2 : t4

 -->


val ('a, 'b) bundle = << f(x) = e1 and g(y) = e2 >>
(* bundle : A 'a. A 'b. (multiarrow t1 -> t2 & t3 -> t4) *)

val ('a, 'b) f = bundle<'a, 'b>.0
val ('a, 'b) g = bundle<'a, 'b>.1

Here polymorphic instantiation (polyvar) and projection from bundles
must both be value constructors. Otherwise this seems okay.


Now the dictionary translation is uniform. The three above become:


val ('a, 'b) bundle = vlam da. vlam db. << f(x) = e1 and g(y) = e2 >>
(* bundle : A 'a. A 'b. (multiarrow t1 -> t2 & t3 -> t4) *)

val ('a, 'b) f = vlam da. vlam db. (bundle<'a, 'b> _ da _ db).0
val ('a, 'b) g = vlam da. vlam db. (bundle<'a, 'b> _ da _ db).1

where _ is value application.



14 Mar 2007

 Note: there is something akin to polymorphic recursion, "valid
 recursion" or whatever where the recursive variable is bound with
 valid type, allowing it to be used at different worlds. We won't
 support this, but it makes sense in principle.
