
This file documents the marshaling format.

 We need to be able to represent any concrete value, i.e.

      Record of (label * exp) list
    | Int of IntConst.intconst
    | String of string
    | Inj of string * exp option

 Easy. But that's not the whole story, because different worlds might
 use different representations for the same thing. For example, in Javascript
 we use records { t : string, v : Object } and { t : string } to represent
 injections. Really, marshaling and unmarshaling are guided by the 'dict'
 argument. From the type we know the representation, so we are able to
 read/create it appropriately.

 However, because of type erasure, it is wasteful to follow this to the
 letter--some type constructors don't change the representation of the
 values at all. For example, any value of type "t at w" is represented
 the same way as "t". Therefore, we won't bother representing At(t,w)
 as a value either; we'll just use t. (This situation would be different
 if we were doing type-checking at unmarshal time, but we aren't.)

 We also need to pick a universal representation (as a string) for each
 form of value. These are listed below.

 tycon              bytecode         javascript       marshaled

 At(t, _)           v                v                v
 Cont _             {g, f}           {g, f}           g f       (integers)
 Conts _            int              int              int
 AllArrow           v                v                v
  { body = t,       
    vals = nil,
    tys }
 AllArrow           int              int              int
  { vals = _ :: _,
    ... }
 WExists (_, t)     v                v                v
 TExists (_, vs)    {d,v0..vn-1}     {d,v0..vn-1}     d v0 .. vn
 Product stl        {l1..ln}         {l1..ln}         l1 v1 .. ln vn
 Addr _             string           string           urlencoded-string
 Shamrock t         v                v                v
 Sum stil           Inj(l,vo)        {t,v} or {t}     l v  or  l
                                                      (object presence info from dict)
 Primcon INT        int              int              int
 Primcon STRING     string           string           .urlencoded-string
 Primcon REF        ref v            object           int
                                       -or-               
                                     int
 Mu (m, vt1..vtn)   v                v                v
 Primcon DICT t     ...
                    dp d                              DP c
                    drec svl                          DR n s1 v1 .. sn vn
                    dsum svl                          DS n s1 + v1 s2 - .. 
                                                           (values either + v or -)
                    dex {d,a}                         DE d n a1 .. an
                    dlookup s                         DL s
                    dall sl d                         DA n s1 .. sn d
                    at (d, w)                         D@ d w
                    mu (m, (s1,d1)..(sn,dn))          DM m n s1 d1 .. sn dn
 TWdict w           str              str              urlencoded-string

 primitive dicts are mapped to characters:
    Dcont -> c
    Dconts -> C 
    Daa   -> A     (non-static alladdr)
    Daddr -> a 
    Ddict -> d 
    Dint -> i
    Dstring -> s
    Dvoid -> v
    Dref -> r
    Dwdict -> w

 TODO: vec, exn


 There is also the issue of bindings. A dictionary value in the CPS language has
 binding structure; for example, we can write

   exists a . (int * a)
 
 in order to unmarshal something of this type, we'll expect two values: the first
 will be a dictionary for 'a' and the next will be a record. We'll be able to read
 off the dictionary and the first field of the record, but we can only read the
 second field by *using* the dictionary we got in the first place.

 Thus, we need to unmarshal with respect to an (initially empty) context, and at
 certain points, bind dictionaries that we either discover during unmarshaling or
 generate ourselves. Another example is when we unmarshal a value of recursive type

   typ                           dict                       val
   #0 mu a0. int + a1            #0 mu a0/d0. int + d1      Inr ()
      'n a1. unit                   'n a1/d1. unit

   so we descend into the 0 arm, but need to arrange now that when we encounter the
   dictionary "variable" d1 that we get

      #1 mu a0/d0. int + d1
         'n a1/d1. unit

   out. So we have to put these bindings (one for each d0...dn) into the context.
   This means that even though roll/unroll are erased in the destination language,
   we still need to represent the dictionary for such types.

 What about the static AllArrow? If we unmarshal

   typ                           dict                       val
   forall a. (int * a)           forall a/d. (int * d)      (impossible)

   we need to come up with a dictionary for a, but we have nothing to use. Fortunately
   there is no value of this type. What kinds of legal values are there?

   typ                           dict                       val
   forall a . a cont             forall a/d. cont           {f=0,g=0}
   forall a . [a] conts          forall a/d. conts          1
   forall a . unit + a           forall a/d. unit + d       Inl ()
   
   ... that actually might be it. In other words, we can get away with not binding d,
   or else binding something like VOID, because we should never encounter it during
   the unmarshaling process. If we did encounter it, that would mean that we could
   extract a value of type /\a . a, which is impossible.

