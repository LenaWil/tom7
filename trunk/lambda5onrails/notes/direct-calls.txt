
     Closure conversion and direct calls                      23 Aug 2007

Right now code produced by lambdac is mostly constructing closures and dictionaries
for those closures. This is because of our "dead simple" closure conversion algorithm.
It is probably a good idea to 


f_55 =
   lam f_56 (x : int, ret_29 : (int) cont) =
     native pores_Plus_46 = Plus (x, y)
     call ret_29 (pores_Plus_46)
call f_55
   (4,
    lam k_nonrec_74 (_ : int) = call f_55 (6, lam k_nonrec_77 (_ : int) = HALT.))

should closure convert as


f_55 =
   lam f_56 (x : int, ret_29 : (int) cont) =
     native pores_Plus_46 = Plus (x, y)
     call ret_29 (pores_Plus_46)
call f_55
   (4,
    lam k_nonrec_74 (_ : int) = call f_55 (6, lam k_nonrec_77 (_ : int) = HALT.))
                                              ^^^^^^^^^^^
                                              |
                                              needs to be a closure because it
                                              escapes (argument to "call")

f_55 =
   lam f_56 (x : int, ret_29 : (int) cont, y : int) =
     native pores_Plus_46 = Plus (x, y)
     call ret_29 (pores_Plus_46)
call f_55
   (4,
    lam k_nonrec_74 (_ : int) = call f_55 (6, CLOSURE, y),
    y)

but f_55 is only used in "call" positions, so we don't have to
create a closure for it: we can just pass the arguments directly.
One nice thing about knowing all the occurrences of f_55 is that
we can tell that its *type* also does not escape (otherwise we
would have a non-uniform type translation, which is really tricky.)

Detecting that all the uses are direct calls is easy. What's not easy
is doing this efficiently: The CPS structure gives us quick free
variable analysis and substitution, but FV sets don't help us to
find direct calls, and substitution doesn't help us add arguments
to the functions. (We might consider collecting up the calls and
replacing them with variables, so that we can substitute new calls
later, but this is wrong because we'd be pulling variables out
of their scopes and the substitution would avoid the capture that
we desire.) I guess we can just do the N^2 thing?

