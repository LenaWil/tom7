
   New Syntax for ML5                       31 Oct 2006


The SML core surface syntax (really, Aphasia2/UML syntax) is a good
starting point for the ML5 syntax. This document contains a few ideas
about what we need to change and add.

== Network signatures ==

One of the major things we need is the ability to specify the contents
of the network statically before type-checking our program. I call these
"Network signatures". A network signature is specified by a series of
"extern" declarations:

(* declare a static world variable *)
extern world w
(* declare that there is a valid address for that world, a *)
extern val a ~ w addr
(* declare that the world w has a print function *)
extern val print : string -> unit @ w

(* can also declare abstract types (?) *)
extern type t


These declarations form the context for the purpose of type checking.
It is expected that at runtime, the dynamic things specified (val a,
val print) can be linked to concrete things at the actual worlds.

== Globals ==

In addition to the local resources that the runtime gives access to,
we may have "global" definitions. These are pieces of data that are
part of the initial context by virtue of having been written in the
prelude of the program; since they are in scope for the entire program
they needn't appear in closures.

global val password = "falderal90" @ server

Is this really something that I need to do at the language level? I
could also do it as a compiler pass. (The only issue I can think of is
security, where we want to make sure that "falderal90" is never on the
client.) I guess I can skip this for now and reconsider it when I
think about the security implications.

== Modal judgment ==

We reserve the identifier @ for writing the modal judgment. In type
annotations, we have

   e ::=   ...
       |   (e : A @ W)
       |   (e : A)

... where the latter is some derived form for the first, but with a
    fresh existential variable for W.

We might be able to save @ in expressions, but let's not bother for now.

We also have a typing judgment written ~ in the abstract syntax. I don't think
there's any need for a unary minus operator, and negative integer constants
can just be written -5 (no space), so we can claim the tilde for this judgment
as well.

   e ::=   ...
       |   (e ~ A @ W)

There's probably no reason for this annotation, actually, since there
are only two things that the expression e can even be. It is more
useful in declarations:

  mob u ~ string = [hello, [name]!]
  valid u ~ 'a -> 'a = (fn x => x)

  (* is this really right? If we think of the ~ as being the annotation
     on the body of the function, then it's bogus, because the body is
     not necessarily valid *)
  vfun f(x : int) ~ int = x

== New types ==

There are a few important new types in ML5:

  w addr
  A at w
  [] A                                         = box
  <> A                                         = diamond
  () A     (will this be ambiguous?)           = circle
  {} A     (need to reject empty record type)  = heart
                                                 (maybe this can be renamed
                                                  to the "shamrock"?)

 I can't resist these last four for their "ASCII duality," representing
 all of the keyboard brackets.

== HTML ==

It may be worth thinking up some clever way to embed HTML in ML5
programs, but this is not an important issue for the first prototype.

