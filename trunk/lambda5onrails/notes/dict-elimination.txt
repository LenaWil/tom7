
 = 27 Mar 2007 =

The purpose of dictionaries is to produce a value that can be used at
runtime to marshal an abstract type. Any place where we use the
marshal primop we will consume this dictionary as an argument. 

We insert dictionaries early in CPS and then maintain an invariant
through closure conversion that each bound type variable is closely
associated with a value binding for that type's dictionary. Until we
have the uses of the dictionaries apparent in the code, we have to be
careful not to break this invariant (by dropping "unused" arguments,
for instance).

After closure conversion, all of the places where we marshal will
be apparent: the go_cc construct is our only way to change worlds,
and at that point we have to marshal two values (env, f) that we'll
send to the remote world in order to continue. At the remote world,
we'll also want to do some kind of unmarshaling. 

  - We might do this by making every go_cc take a bytevec (= marshaled env) 
    and a bytevec cont (that unmarshals its argument?) Great but how?

    go_cc[w; a] [env, f]     (where f is some closed function taking env)

    Arranging that we send a bytestring is easy.

    let m_env = marshal[t] env
    in
       go_cc[w; a] [m_env, f]
    end

    but now what about f? It has to be marshaled too. (Actually it
    wouldn't be too much trouble here to have special support for
    marshaling functions; their types are always concrete and 

Once we've generated all the uses of dictionaries we can then ditch
the invariant that associates dict values with bound type variables,
and treat these like other arguments (they can be dropped if unused,
for example).
