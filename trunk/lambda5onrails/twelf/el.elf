
% The external language of ML5 is just like the internal language,
% but it has some derived connectives like Box and Dia.

tye : type.

ate  : tye -> world -> tye.             %infix none 2 ate.
=>e  : tye -> tye -> tye.               %infix right 8 =>e.
&e : tye -> tye -> tye.                 %infix none 9 &e.
she : (world -> tye) -> tye.
addre : world -> tye.
!e : tye -> tye.
?e : tye -> tye.

expe : type.
vale : type.
vvale : type.

% this is the only form of a valid value
vve : (world -> vale) -> vvale.

% values are expressions, too.
valuee : vale -> expe.
% valid values are values, too.
valide : vvale -> vale.

lame : (vale -> expe) -> vale.
appe : expe -> expe -> expe.
mkpaire : expe -> expe -> expe.
paire : vale -> vale -> vale.
fste : expe -> expe.
snde : expe -> expe.
conste : world -> vale.

helde : vale -> vale.
holde : expe -> expe.
shame : vvale -> vale.
letse : expe -> (vvale -> expe) -> expe.
letae : expe -> (vale -> expe) -> expe.

theree : vale -> vale -> vale.
heree  : expe -> expe.
boxe   : (world -> expe) -> vale.
unboxe : expe -> expe.
% world, address, value
letde : expe -> (world -> vale -> vale -> expe) -> expe.

% give world, address, and remote expression
gete : world -> expe -> expe -> expe.
pute : expe -> (vvale -> expe) -> expe.
localhoste : expe.

% %%%%%%%%%%%%%%%%%%%%%
%    EL typing rules
% %%%%%%%%%%%%%%%%%%%%%

% |- e : t @ w
ofe : expe -> tye -> world -> type.
ofve : vale -> tye -> world -> type.

% x ~ w.t   as hypothesis
ofvve : vvale -> (world -> tye) -> type.

% Mobility
mobilee : tye -> type.
%mode mobilee *A.

addrMe : mobilee (addre W).
atMe   : mobilee (A ate W).
&Me    : mobilee A -> mobilee B -> 
         mobilee (A &e B).
boxMe  : mobilee (!e A).
diaMe  : mobilee (?e A).
shaMe  : mobilee (she A).

% the only form of valid value
vvIe : ({w} ofve (Vf w) (Af w) w) ->
        ofvve (vve Vf) Af.

ofvvalide : ofve (valide V) (Af W) W <- ofvve V Af.
ofvaluee : ofe (valuee V) A W <- ofve V A W.

% rules for shamrock
shIe : ofve (shame Vf) (she Af) W <- ofvve Vf Af.
shEe : ofe M (she A) W ->
        ({x:vvale} ofvve x A ->
           ofe (N x) C W) ->
        ofe (letse M N) C W.

oflocalhoste : ofe localhoste (addre W) W.
addrIe : ofve (conste W) (addre W) W'.

atIve : ofve (helde V) (A ate W') W
     <- ofve V A W'.
atIe : ofe (holde M) (A ate W) W
    <- ofe M A W.
atEe : ofe M (A ate W') W ->
       ({v:vale} ofve v A W' ->
	 ofe (N v) C W) ->
       ofe (letae M N) C W.

=>Ie : ofve (lame [x:vale] M x) (A =>e B) W
    <- ({x:vale} ofve x A W ->
		ofe (M x) B W).
=>Ee : ofe M1 (A =>e B) W ->
       ofe M2 A W ->
       ofe (appe M1 M2) B W.

&Ive : ofve V1 A W ->
       ofve V2 B W ->
       ofve (paire V1 V2) (A &e B) W.
&Ie : ofe M1 A W ->
      ofe M2 B W ->
      ofe (mkpaire M1 M2) (A &e B) W.

&E1e : ofe (fste M) A W <- ofe M (A &e B) W.
&E2e : ofe (snde M) B W <- ofe M (A &e B) W.

ofpute : mobilee A ->
	 ofe M A W ->
         ({u:vvale} ofvve u ([w] A) ->
           ofe (N u) C W) ->
         ofe (pute M N) C W.

ofgete : mobilee A ->
	 ofe W'R (addre W') W ->
	 ofe M A W' ->
	 ofe (gete W' W'R M) A W.

?Ive : ofve Va (addre W') W ->
       ofve V A W' ->
       ofve (theree Va V) (?e A) W.
?Ie : ofe M A W ->
      ofe (heree M) (?e A) W.
?Ee : ofe M (?e A) W ->
      ({w:world}
       {a:vale}{wa : ofve a (addre w) W}
       {x:vale}{wx : ofve x A w} ofe (N w a x) C W) ->
      ofe (letde M N) C W.

!Ie : ({w:world} ofe (MF w) A w) ->
      ofve (boxe MF) (!e A) W.
!Ee : ofe M (!e A) W ->
      ofe (unboxe M) A W.

