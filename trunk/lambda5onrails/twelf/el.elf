
% The external language of ML5 is just like the internal language,
% but it has some derived connectives like Box and Dia.

% TODO: add polytypes.

world : type.                           %name world W w.

tye : type.

ate  : tye -> world -> tye.             %infix none 2 ate.
=>e  : tye -> tye -> tye.               %infix right 8 =>e.
&e : tye -> tye -> tye.                 %infix none 9 &e.
circe : tye -> tye.
addre : world -> tye.
!e : tye -> tye.
?e : tye -> tye.

% XXX polymorphism

expe : type.
vale : type.
% valid expressions 
vexpe : type.
vvale : type.

% this is the only form of a valid value
vve : (world -> vale) -> vvale.

% values are expressions, too.
valuee : vale -> expe.
% valid values are values, too.
valid : vvale -> vale.


holde : vale -> vale.

lame : (vale -> expe) -> vale.
appe : expe -> expe -> expe.
mkpaire : expe -> expe -> expe.
paire : vale -> vale -> vale.
fste : expe -> expe.
snde : expe -> expe.
conste : world -> vale.

cire : vexpe -> vale.

heree : expe -> expe.
boxe : (world -> expe) -> vale.
unboxe : expe -> expe.

% give world, address, and remote expression
gete : world -> expe -> expe -> expe.
localhoste : expe.

letce : expe -> (vvale -> expe) -> expe.
letae : expe -> (vale -> expe) -> expe.
% world, address, value
letde : expe -> (world -> vale -> vale -> expe) -> expe.

%% valid expressions
mobce : expe -> vexpe.
cvaluee : vvale -> vexpe.


% %%%%%%%%%%%%%%%%%%%%%
%    EL typing rules
% %%%%%%%%%%%%%%%%%%%%%

% |- e : t @ w
ofe : expe -> tye -> world -> type.
ofve : vale -> tye -> world -> type.

% |- e ~ t @ w
ofse : vexpe -> tye -> world -> type.

% x ~ t   as hypothesis
ofvve : vvale -> tye -> type.


% Mobility
mobilee : tye -> type.
%mode mobilee *A.

addrMe : mobilee (addre W).
atMe   : mobilee (A ate W).
&Me    : mobilee A -> mobilee B -> 
         mobilee (A &e B).
boxMe  : mobilee (!e A).
diaMe  : mobilee (?e A).

% Valid expressions
ofscvale : ofse (cvaluee V) A W <- ofvve V A.

ofsmobce :  mobilee A ->
            ofe M A W ->
            ofse (mobce M) A W.

ofvaluee : ofe (valuee V) A W <- ofve V A W.

% rules for circle
cirIe : ofve (cire VE) (circe A) W <- ofse VE A W.

cirEe : ofe M (circe A) W ->
        ({x:vvale} ofvve x A ->
           ofe (N x) C W) ->
        ofe (letce M N) C W.

oflocalhoste : ofe localhoste (addre W) W.

addrIe : ofve (conste W) (addre W) W'.


atIe : ofve (holde V) (A ate W') W
        <- ofve V A W'.

atEe : 
     ofe M (A ate W') W ->
     ({v:vale} ofve v A W' ->
       ofe (N v) C W) ->
     ofe (letae M N) C W.


=>Ie : ofve (lame [x:vale] M x) (A =>e B) W
     <- ({x:vale} ofve x A W ->
                 ofe (M x) B W).

=>Ee : 
      ofe M1 (A =>e B) W ->
      ofe M2 A W ->
      ofe (appe M1 M2) B W.


&Ive : 
       ofve V1 A W ->
       ofve V2 B W ->
       ofve (paire V1 V2) (A &e B) W.

&Ie : 
     ofe M1 A W ->
     ofe M2 B W ->
     ofe (mkpaire M1 M2) (A &e B) W.

&E1e : ofe (fste M) A W
       <- ofe M (A &e B) W.

&E2e : ofe (snde M) B W
       <- ofe M (A &e B) W.

ofgete : 
     mobilee A ->
     ofe W'R (addre W') W ->
     ofe M A W' ->
     ofe (gete W' W'R M) A W.

?Ie :
     ofe M A W ->
     ofe (heree M) (?e A) W.

!Ie :
     ({w:world} ofe (MF w) A w) ->
     ofve (boxe MF) (!e A) W.

!Ee : ofe M (!e A) W ->
      ofe (unboxe M) A W.

?Ee :
     ofe M (?e A) W ->
     ({w:world}
      {a:vale}{wa : ofve a (addre w) W}
      {x:vale}{wx : ofve x A w} ofe (N w a x) C W) ->
     ofe (letde M N) C W.

% could do dynamic semantics here,
% but perhaps better to just say that
% the dynamic semantics is given in
% terms of elaboration into the IL.

