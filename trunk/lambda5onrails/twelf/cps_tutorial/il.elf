
% typ : type.

%%% Natural deduction with hybrids and quantification

=>  : typ -> typ -> typ.               %infix right 8 =>.
& : typ -> typ -> typ.                 %infix none 9 &.
unit : typ.

%% expressions

% exp : type.
% val : type.

% values are expressions, too.
value : val -> exp.

lam : (val -> exp) -> val.
app : exp -> exp -> exp.
mkpair : exp -> exp -> exp.
pair : val -> val -> val.
fst : exp -> exp.
snd : exp -> exp.
1 : val.

% could be a derived form for an in-place
% application, but it is much more convenient
% to generate these in the translation and
% quite easy to implement in this language
let : exp -> (val -> exp) -> exp.



% |- e : t
of : exp -> typ -> type.
% ofv : val -> typ -> type.


% containments
ofvalue : of (value V) A <- ofv V A.

unitI : ofv 1 unit.

=>I : ofv (lam [x:val] M x) (A => B)
     <- ({x:val} ofv x A ->
                 of (M x) B).

=>E : 
      of M1 (A => B) ->
      of M2 A ->
      of (app M1 M2) B.


&Iv : 
       ofv V1 A ->
       ofv V2 B ->
       ofv (pair V1 V2) (A & B).

&I : 
     of M1 A ->
     of M2 B ->
     of (mkpair M1 M2) (A & B).

&E1 : of (fst M) A
     <- of M (A & B).

&E2 : of (snd M) B
     <- of M (A & B).

oflet :
     of M A ->
     ({y:val}{ofy : ofv y A}
        of (N y) C) ->
     of (let M N) C.
