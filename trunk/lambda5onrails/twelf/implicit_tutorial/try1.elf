exp : type.
typ : type.
of  : exp -> typ -> type.

% so that the language is inhabited
0 : exp.
1 : exp.
bit : typ.
void : typ.
of1 : of 1 bit.
of0 : of 0 bit.



% implicit version
translate-i : of M A -> of M' A -> type.
%mode translate-i +D -D'.

translate-i1 : translate-i of1 of0.
translate-i0 : translate-i of0 of1.


% explicit version
translate-e : {m : exp}{a : typ} {m' : exp}
              of m a -> of m' a -> type.
%mode translate-e +M +A -M' +D -D'.

translate-e/i : translate-e M A M' D D' <- translate-i D D'.

% %worlds () (translate-i _ _) (translate-e _ _ _ _ _).
% %total D (translate-i D _).

% %total D (translate-e _ _ _ D _).



% explicit version
translate2-e : {m : exp}{a : typ} {m' : exp}
               of m a -> of m' a -> type.
%mode translate2-e +M +A -M' +D -D'.

translate2-e1 : translate2-e 1 bit 0 of1 of0.
translate2-e1 : translate2-e 0 bit 1 of0 of1.

% implicit version
translate2-i : of M A -> of M' A -> type.
%mode translate2-i +D -D'.

translate2-i/e : translate2-i D D' <- translate2-e _ _ _ D D'.

% %worlds () (translate2-i _ _) (translate2-e _ _ _ _ _).

% %total D (translate2-e _ _ _ D _).
% %total D (translate2-i D _).


% "advanced"

apply-i : ({y:exp} of (F y) A) ->
	  of (F 0) A -> type.
%mode apply-i +D -D'.

apply-iclosed : apply-i ([y:exp] D) D.

% explicit
apply-e : {f:exp -> exp} {a:typ} ({y:exp} of (f y) a) -> of (f 0) a -> type.
%mode apply-e +F +A +D -D'.

apply-e/i : apply-e F A D D' <- apply-i D D'.



% explicit
apply2-e : {f:exp -> exp} {a:typ} {x:exp} ({y:exp} of (f y) a) -> of (f x) a -> type.
%mode apply2-e +F +A +X +D -D'.

apply2-eclosed : apply2-e _ _ _ ([y] D) D.



apply2-i : ({y:exp} of (F y) A) ->
	   of (F X) A -> type.
%mode +{X:exp} +{A:typ} +{F : exp -> exp}
      +{D : {y:exp} of (F y) A} -{D' : of (F X) A} 
      apply2-i D D'.

% apply2-i/e : apply2-i D D' <- apply2-e _ _ D D'.

apply2-i/e  : apply2-i D D' <- apply2-e F A X D D'.
apply2-i/e' : apply2-i D D' <- apply2-e ([x] X) A X D D'.


%worlds  () (apply2-i _ _) (apply2-e _ _ _ _ _).
%total D (apply2-e _ _ _ D _).
%total D (apply2-i D _).

%worlds  () (apply-i _ _) (apply-e _ _ _ _).
%total D (apply-i D _).
%total D (apply-e _ _ D _).

