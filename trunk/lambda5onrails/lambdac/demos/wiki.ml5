(* This is an attempt at a "real" application in ML5. It is a small
   Wiki that allows for the creation of articles with arbitrary string
   names, with links between them using [[bracket]] syntax. The text
   displayed for a link can be changed by writing [[target|text to show]].
   supports templates, using the syntax {{templatename}}, to include
   the contents of one article within another.

   The article XYZ is stored in the trivial-db key XYZ as its raw wiki
   source code (string). 

   All rendering is performed on the client.

*)

unit
    import "std.mlh"
    import "list.mlh"
    import "string.mlh"
    import "dom.mlh"
    import "timer.mlh"
    import "trivialdb.mlh"
    import "lock.mlh"
    import "regexp.mlh"

    (* page skeleton. this doesn't change. *)
    val id.articlename = [articlename]
    val id.rendered = [rendered]
    val id.source = [source]
    val id.templates = [templates]
    val id.debug = [debugs]
    val id.editcontrols = [editcontrols]
    val id.gobox = [gobox]
    val id.saveindicator = [savei]

    (* in ms *)
    val SAVE-FREQUENCY = 3000
    val CHECK-FREQUENCY = 1000

    val articlename = ref []

    (* keep track of the last time the source (or templates) were modified.
       this is monotonically increasing. *)
    val changed = ref (js.now ())
    (* XXX rendered only at the beginning of time: forces render on start *)
    val rendered = ref (js.now ()) (* (js.maketime (0, 0, 0, 0)) *)
    val saved = ref (js.now ())

    extern val alert : string -> unit @ home

    do runtime.no-messages ()

    val template-cache = ref nil
    val pagelock = new-lock ()

    (* exception Wiki of string *)
    fun please-wait () =
        dom.setstring(dom.getbyid id.rendered, [innerHTML],
                      [<span class="rendermessage">please wait...</span>])
    
    (* XXX locks! *)
    fun update-template (s, r) =
        let
            fun find nil = 
                let in
                    (* raise Wiki [cached template not found?] *)
                    alert [cached template not found??];
                    nil
                end
              | find ((x as (h, _)) :: t) = if s seq h
                                            (* empty keys treated as non-existing *)
                                            then (h, if r seq ""
                                                     then NONE
                                                     else SOME r) :: t
                                            else x :: find t
        in
            template-cache := find (!template-cache);
            (* re-renderable *)
            changed := js.now ()
        end

    fun add-cache s =
        let 
            put s = s
        in
            template-cache := (s, NONE) :: !template-cache;
            (* hook on DB *)
            from server get
            let 
                fun up () =
                    let 
                        (* XXX the key might not exist yet,
                           (supposing this is the immediate non-hook call
                           below). We should test with like trivialdb.exists? *)
                        put r = trivialdb.read s
                    in
                        from home
                        get update-template (s, r)
                    end : unit @ server
            in
                (* whenever the template is updated, tell us. *)
                trivialdb.addhook (s, cont up);
                (* also fetch the result now. *)
                up ()
            end
        end

    fun find-insert-template s =
        let
            fun find-template nil = NONE
              | find-template ((h, res) :: t) =
                if s seq h
                then SOME res
                else find-template t
        in
            case find-template (!template-cache) of
                (* cache it *)
                NONE => (add-cache s; NONE)
              | SOME res => res
        end

    fun expand-template t = 
        (* some "magic" template names... *)
        if t seq [PAGENAME]
        then SOME (!articlename)
        else find-insert-template t

    (* renders wiki source code as html. *)
    fun renderhtml s =
        let
            datatype tok =
                NoToken
              | String of string
              | Bar
              | Equals
              | NewLine
              | OLink
              | CLink
              | OTempl
              | CTempl

            val off = ref 0
            fun token () =
                if !off >= size s
                then NoToken
                else 
                  let
                      val start = !off
                      fun eat () =
                          if !off >= size s
                          then String(substring(s, start, !off - start))
                          else
                            let in
                              (* PERF could be faster with eat-first eat-rest, not testing each time... *)
                              case !off - start of
                                  0 =>
                                     let val c = ssub (s, !off)
                                     in
                                       off := !off + 1; 
                                       case c of
                                           (* if it is the first character, we behave
                                              differently than if we see some letters
                                              terminated by one of the special chars.
                                              (note, we know the string does not start
                                              with [[ or ]] or {{ or }}) *)
                                           ?| => Bar
                                         | ?= => Equals
                                         | ?\n => NewLine
                                         | _ => eat ()
                                     end
                                | len =>
                                     (case ssub (s, !off) of
                                          ?| => String(substring(s, start, len))
                                        | ?] => String(substring(s, start, len))
                                        | ?[ => String(substring(s, start, len))
                                        | ?= => String(substring(s, start, len))
                                        | ?{ => String(substring(s, start, len))
                                        | ?} => String(substring(s, start, len))
                                        | ?\n => String(substring(s, start, len))
                                        | _ => (off := (!off + 1); eat ()))
                            end

                  in
                      (* alert [sizecheck]; *)
                      (* might be [[ or ]] *)
                      if !off <= size s - 2
                      then 
                          let val next2 = substring(s, !off, 2)
                          in
                              (* alert [next2check '[next2]']; *)
                              if next2 seq "[["
                              then (off := !off + 2; OLink)
                              else if next2 seq "]]"
                                   then (off := !off + 2; CLink)
                                   else 
                                       (* except when it is triple, signifying
                                          the occurrence of a template substitution *)
                                       if next2 seq "{{" 
                                          andalso not (!off <= size s - 3 andalso
                                                       substring(s, !off + 2, 1) seq "{")
                                          andalso not (!off > 0 andalso
                                                       substring(s, !off - 1, 1) seq "{")
                                       then (off := !off + 2; OTempl)
                                       else if next2 seq "}}"
                                            then (off := !off + 2; CTempl)
                                            else eat ()
                          end
                      else eat ()
                  end

            fun make () = makewith (token ())
            and makewith t =
               case t of
                    String ss => [[ss][make ()]]
                  | Bar => [|[make()]]
                  | Equals => [=[make()]]
                  (* these are probably syntax errors...
                     (except for template args) *)
                  | CTempl => [["}}"][make ()]]
                  | CLink => [["]]"][make ()]]
                  | OLink => getlink ()
                  | OTempl => gettempl ()
                  | NewLine => getbreaks [<br />]
                  (* done *)
                  | NoToken => []

            and getbreaks s =
                case token () of
                    (* two breaks the first time, one break each additional time. *)
                    NewLine => [[s]<br />[getbreaks []]]
                  | t => makewith t

            (* XXX should ignore whitespace... *)
            and gettempl () =
                let
                    (* XXX ref for errors. *)

                    val argct = ref 1

                    fun getarg sofar =
                        case token () of
                            String ss => getarg [[sofar][ss]]
                          | CTempl => (sofar, nil)
                          | Bar => (sofar, getargname "")
                          | _ => (* syntax error *) ("ERROR", nil)

                    and getargname sofar = 
                        case token () of
                            String ss => getargname [[sofar][ss]]
                          | Equals =>
                                let val (arg, l) = getarg ""
                                in (sofar, arg) :: l
                                end
                          (* anonymous arg *)
                          | Bar =>
                                let val l = getargname ""
                                    val n = !argct
                                in
                                    argct := n + 1;
                                    (itos n, sofar) :: l
                                end
                          (* anonymous arg, ending *)
                          | CTempl =>
                                (* no need to increment *)
                                (itos (!argct), sofar) :: nil

                          | _ => (* syntax error *) nil

                    fun target sofar =
                        case token () of
                             String ss => target [[sofar][ss]]
                           | Bar => (sofar, getargname [])
                           | Equals => target [[sofar]=]
                           | NewLine => target sofar
                           | CLink => ([*mismatched brackets*], nil)
                           | OTempl => ([*template within template name*], nil)
                           | CTempl => (sofar, nil) (* no args *)
                           | NoToken => ([*unclosed template*], nil)
                           | OLink => ([*link within template name*], nil)
                    val (t, args) = target []
                in
                    case expand-template t of
                        NONE => [<span class="unknowntemplate">[t]</span>[make ()]]
                      (* Want to render it, since it might contain links, etc. *)
                      | SOME s => 
                            let 
                                (* first, trash any noinclude sections. 
                                   try to get the shortest match by not
                                   allowing any other <tags> within... *)
                                val r = js.regexp ("\\<noinclude\\>[^<]*\\</noinclude\\>", "g")
                                (* replace them with nothing. *)
                                val s = js.regexp-replace (s, r, "")

                                fun rep (s, nil) = s
                                  | rep (s, (name, value) :: rest) =
                                    rep (string-replace ([{{{[name]}}}], value, s), rest) : string @ home
                                val s = rep (s, args)
                            in 
                                (* and then render the result... *)
                                [[renderhtml s][make ()]]
                            end
                end : string @ home

            and getlink () =
                let 
                    fun bartarget () =
                        (case token () of
                             String ss => [[ss][bartarget ()]]
                           | Bar => [|[bartarget ()]]
                           | Equals => [=[bartarget ()]]
                           | CLink => []
                           | NewLine => bartarget ()
                           | OTempl => [*template within barlink*]
                           | CTempl => [*mismatched barbrackets*]
                           | NoToken => [*unclosed barlink*]
                           | OLink => [*link within barlink*])

                    fun target sofar =
                        (case token () of
                             String ss => target [[sofar][ss]]
                           | Bar => (sofar, bartarget ())
                           | Equals => target [[sofar]=]
                           | NewLine => target sofar
                           | CLink => (sofar, sofar)
                           | OTempl => (sofar, [*template within link*])
                           | CTempl => (sofar, [*mismatched brackets*])
                           | NoToken => (sofar, [*unclosed link*])
                           | OLink => (sofar, [*link within link*]))
                    (* val () = alert "getlink" *)
                    val (dst, show) = target []
                in
                    (* PERF say leaks *)
                    [[linktowith dst show][make ()]]
                end : string @ home
        in
            (* alert [renderhtml]; *)
            make ()
        end : string @ home

    and linkto t = linktowith t t
    and linktowith dst show = [<span class="wikilink" onclick="[say goto-article dst]">[show]</span>]

    (* to go to an article, we fetch its source from the server, then change the
       current article name, ... 
       XXX should lock
       *)
    and goto-article name =
        let
            do please-wait ()
            put name = name
            val contents = from server get trivialdb.read name
        in
            articlename := name;
            dom.setstring(dom.getbyid id.articlename, [innerHTML], name);
            (* XXX need escaping? *)
            dom.setstring(dom.getbyid id.source,
                          [value],
                          contents);
            render()
        end


    (* renders the current value of the edit box. *)
    and render () =
        let 
            val start = js.now ()
            val r = renderhtml (dom.getstring(dom.getbyid id.source, [value]))
            val tems = string-delimit ", " 
                (list-map (fn (x, NONE) => (* show red? *) linkto x
                            | (x, _) => linkto x) (! template-cache))
        in
            (* debugging... *)
            dom.setstring(dom.getbyid id.templates, [innerHTML], tems);
            dom.setstring(dom.getbyid id.rendered, [innerHTML], r);
            rendered := start
        end

    fun try-render () =
      maybe-with-lock pagelock render


    fun show-element s =
        dom.setstring(dom.getnode(dom.getbyid s, [style]), [display], [block])
    fun hide-element s =
        dom.setstring(dom.getnode(dom.getbyid s, [style]), [display], [none])

    fun save () = 
        let 
            val start = js.now ()
            put article  = !articlename
            put contents = dom.getstring(dom.getbyid id.source, [value])
        in
            from server get trivialdb.update (article, contents);
            saved := start;
            hide-element id.saveindicator
        end

    fun source-keyup () = 
        let in
            changed := js.now ();
            show-element id.saveindicator
        end

    val ctr = ref 0
    fun every-second () =
        let in
            ctr := !ctr + 1;
            dom.setstring(dom.getbyid id.debug,
                          [innerHTML], 
                          [[itos (!ctr)] changed: [js.time-tostring (!changed)] rendered: [js.time-tostring (!rendered)]]);
            (* only if changed... *)
            if js.time-lt (!rendered, !changed)
            then try-render ()
            else ();

            (* if it has changed, and we haven't saved for a while, save. *)
            (* PERF this (harmlessly) re-saves whenever one of the templates it uses changes.
               we should perhaps distinguish changes that affect rendering and changes that
               effect the source code. *)
            if js.time-lt (!saved, !changed)
            then if js.time-difference-ms (!changed, js.now ()) > SAVE-FREQUENCY
                 then save ()
                 else ()
            else ()
        end

    fun page-article () =
        let in
            (* turn on rendered display, hide edit box. *)
            show-element id.rendered;
            hide-element id.source;
            hide-element id.editcontrols
        end

    fun page-edit () =
        let in
            (* turn on rendered display and edit box. *)
            show-element id.rendered;
            show-element id.source;
            show-element id.editcontrols
        end

    fun click-go () =
        let in
            goto-article (dom.getstring(dom.getbyid id.gobox, [value]));
            dom.setstring(dom.getbyid id.gobox, [value], [])
        end

    fun type-go ?\r = click-go ()
      | type-go _ = ()

    do dom.setstring 
        (dom.getbyid [page],
         [innerHTML],
         [<style>[datafile "wiki.css"]</style>
          <div id="container"><div style="float:left;">
           <center><img src="/static/logo.png" /></center>
           <br/>
           <div class="sidebar">
             [linkto [main]]<br/>
             [linkto [about]]<br/>
           </div>
           
           <input class="gobox" type="text" id="[id.gobox]" onkeyup="[say { event.keyCode = c } type-go c]" /><br />
           <input class="gobut" type="submit" value="go" onclick="[say click-go ()]" />

          </div> <!-- container -->
          
          <div style="margin-left:140;" id="content">
           <div class="tabs">
            <span class="userimage" style="float:right">
             [[] (* XXX get this from the server! *)]
             [linkto [128.2.203.136]]
            </span>
            <span class="tab"><span class="clicktab" onclick="[say page-article ()]">article</span></span>
            <span class="tab"><span class="clicktab" onclick="[say page-edit ()]">edit</span></span>
             <!--
            <span class="tab"><a href="/history/home">don't</a></span>
            <span class="tab"><a href="/run/home">do anything yet</a></span>
             -->
           </div>
           <div id="[id.articlename]" class="heading">articlename</div> <br />

          <div id="[id.rendered]" class="rendered"></div> <br />
          [[] (* start in article mode; edit controls hidden. *)]
          <textarea id="[id.source]" onkeyup="[say source-keyup ()]" class="source" style="display:none">the source code</textarea>
          <div id="[id.editcontrols]" style="display:none">
           <br /><span class="button" onclick="[say try-render ()]">render</span>&nbsp;<span class="button" onclick="[say save ()]">save</span>
           <br /><br /><div id="[id.templates]">&nbsp;</div>
          </div>
          <br /><div id="[id.saveindicator]" class="warnimage" style="height : 40px; display:none">Unsaved changes.</div>
          <br /><div id="[id.debug]" class="debug">&nbsp;</div>
          <div class="copyright">This is not a Copyright notice.</div>
          </div> <!-- content -->
          ])

    do goto-article [main]

    do js.setinterval (say every-second (), CHECK-FREQUENCY)

in
end
