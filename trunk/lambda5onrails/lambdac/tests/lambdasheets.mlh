datatype data = 
    Add of data * data
  | Mult of data * data
  | String of string
  | Var of int * int
  | Int of int 

fun dtos dat = 
    case dat of 
       Add(d1,d2) => [+ [dtos d1] [dtos d2]]
     | Mult(d1,d2) => [* [dtos d1] [dtos d2]]
     | String(str) => ["[str]"]
     | Var(row,col) => [`[itos row]`[itos col]]
     | Int(i) => itos i

fun inline isDigit(chr) = (chr <= ord ?9 andalso chr >= ord ?0)

fun parse(str) = 
    let

       val len = size str
       val off = ref 0
       fun incr a = (off := !off + 1; a)

       (* Called with !off at the first char of an integer *)
       (* Returns with !off one past the last char of the integer *)
       fun eatInt() = 
           let 
             val num = ref 0
             fun loop() = 
                let val chr = ord(ssub(str,!off)) in
                   if !off >= len then !num
                   else if isDigit chr
                   then (num := !num * 10 + (chr - ord ?0); incr(); loop())
                   else !num
                end
           in loop() end
             
       (* Called with !off at an open quote *)
       (* Returns with !off one past the closing quote, or past the end of the
        * string... *)
       fun eatString() = 
           let
             val () = incr()
             fun scanend(l) = 
                 if !off >= len then (l)
                 else 
                   let in 
                      if ord(ssub(str,!off)) = ord ?"
                      then l
                      else (incr(); scanend(l + 1))
                   end
             val start = !off
             val len = scanend(0)
             val eaten_str = substring(str,start,len)
           in
	     incr(eaten_str)   
           end

       fun eatCellID() = 
           if !off >= (len + 1) then String([######])
           else let
             val chr1 = ord(ssub(str,!off))
             val chr2 = ord(ssub(str,!off + 1)) - ord ?0
             val () = off := !off + 2
             val row : int = 
                 if chr1 >= ord ?a andalso chr1 <= ord ?z 
                 then chr1 - ord ?a
                 else if chr1 >= ord ?A andalso chr1 <= ord ?Z
                 then chr1 - ord ?A 
                 else 0
             val col : int = 
                 if !off < len 
                       andalso ord(ssub(str,!off)) >= ord ?0
                       andalso ord(ssub(str,!off)) <= ord ?9
                 then incr(chr2 * 10 + ord(ssub(str,!off)) - ord ?0)
                 else chr2
           in
             Var(row,col)
           end
           

        fun eatExpr() = 
           if !off >= len then String([######]) 
           else
           let in
             case ssub(str,!off) of 
                ?  => (incr(); eatExpr())
              | ?" => String(eatString())
              | ?+ => (incr(); Add(eatExpr(),eatExpr()))
              | ?* => (incr(); (Mult(eatExpr(),eatExpr())))
              | c  =>
                let in 
                   if isDigit(ord c) then Int(eatInt())
                   else eatCellID()
                end
 
           end  

        fun parse_check() = 
            if len <= 0 then String("")
            else let 
              val first = ord(ssub(str,0))
            in
              if first = ord ?=
              then (incr(); eatExpr())
              else if isDigit first 
              then Int(eatInt())
              else String(str)  
            end


    in 
        parse_check()
    end 


