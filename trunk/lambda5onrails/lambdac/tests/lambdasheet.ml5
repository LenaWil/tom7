unit
    import "std.mlh"
    import "list.mlh"
    import "string.mlh"
    import "dom.mlh"
    import "timer.mlh"
    import "trivialdb.mlh"
    import "lock.mlh"
    import "regexp.mlh"

    import "lambdasheet.mlh"

    put WIDTH = 12
    put HEIGHT = 12

    do runtime.no-messages ()

    fun inline cellid (x, y) = [c[itos x]_[itos y]]
    fun inline cellidd c = [d[cellid c]]

    fun inline app-cells f =
        let 
            fun cells (y, x) =
                if x >= WIDTH
                then ()
                else (f (x, y);
                      cells (y, x + 1))
            fun rows y =
                if y >= HEIGHT
                then ()
                else (cells (y, 0); rows (y + 1))
        in
            rows 0
        end

    do dom.setstring 
        (dom.getbyid [page],
         [innerHTML],
         [<style>[datafile "lambdasheet.css"]</style>
          <img width="349" height="46" 
            src="/static/lambdasheet-logo.png" />
          [[] (* we focus this to send keystrokes away *)]
          <input id="sink" style="display:none" />
          <div id="sheet">
          <div style="border : 1px solid #999999; text-align : center;\
           margin-left : auto; margin-right: auto; font: 48px Verdana, \
           Arial, Helvetica">please wait.</div>
          </div>
          <div>Syntax: =<i>exp</i> evaluates <i>exp</i>. An expression can be 
            a number, a "string", a cell name like C6, +<i>e1</i> <i>e2</i> or
            *<i>e1</i> <i>e2</i>.
          </div>
          ])

    fun cell-key cell ?\r = 
        let put cid = cellid cell
            put v = dom.getstring(dom.getbyid cid, [value])
        in
            dom.focus (dom.getbyid [sink]);
            from server get
            trivialdb.update (cid, v)
        end
      | cell-key cell c = ()
        (* could color this as unsaved? *)

    val table =
     let
         fun show-cell s =
             let in
                 dom.setstring(dom.getnode(dom.getbyid s, "style"),
                               "display",
                               "block");
                 dom.focus(dom.getbyid s)
             end
         fun hide-cell s =
             dom.setstring(dom.getnode(dom.getbyid s, "style"),
                           "display",
                           "none")

         fun blur (x, y) =
             let in
                 cell-key (x, y) ?\r;
                 hide-cell (cellid (x, y))
             end

         fun makecells (y, x) =
           if x >= WIDTH
           then ""
           else [<td 
                  onclick="[say show-cell (cellid (x, y))]"
                  style="overflow-x:hidden;width:64px">\
                 <div 
                  class="disp" type="text" id="[cellidd (x, y)]">&nbsp;</div>
                 <input 
                  style="display:none"
                  class="cell" type="text" id="[cellid (x, y)]"
                  onblur="[say blur (x, y)]"
                  onkeyup="[say { event.keyCode = c } cell-key (x, y) c]"/>\
                 </td>[makecells (y, x + 1)]]

         fun makerows y =
           if y >= HEIGHT
           then ""
           else [<tr><td class="header">[rowname y]</td>[makecells (y, 0)]</tr>
                 [makerows (y + 1)]]
         fun makehead x =
           if x >= WIDTH
           then ""
           else [<td class="header">[itos x]</td>[makehead (x + 1)]]
     in
         [<table>
          <tr><td>&nbsp;</td>[makehead 0]</tr>
          [makerows 0]
          </table>]
     end

    do dom.setstring 
        (dom.getbyid [sheet],
         [innerHTML],
         table)

    (* fun display (_, _, v) = [<span style="color:#888888">[v]</span>] *)
    val display = eval_me

                                
    fun update-display (x, y) =
        let val v = dom.getstring(dom.getbyid (cellid (x, y)), "value")
        in dom.setstring (dom.getbyid (cellidd (x, y)), "innerHTML", display (y, x, v))
        end

    fun updated-cell (x, y, v) = 
        (* and blink its color? *)
        let in
            dom.setstring (dom.getbyid (cellid (x, y)), "value", v);
            (* do this eagerly, I guess? *)
            update-display (x, y)
        end

    (* and update handlers *)
    do from server get
       let val l = ref nil
           do app-cells (fn (x, y) => 
                         let val cid = cellid (x, y)
                             put (x, y) = (x, y)
                             fun doup () =
                                 let put v = trivialdb.read cid
                                 in from home get
                                     updated-cell (x, y, v)
                                 end
                             val cur = trivialdb.read cid
                         in
                             if cur seq ""
                             then ()
                             else l := (x, y, cur) :: !l;
                             trivialdb.addhook(cid, cont doup)
                         end) (* XXX *)

           put l = !l
       in
        from home get 
         let 
             fun propagate n =
                 let in
                     app-cells update-display;
                     (* alert ([propagate [itos n]]); *)
                     ignore (js.settimeout (say propagate (n + 1), 100))
                 end
         in
             list-app updated-cell l;
             propagate 0
         end
       end


in
end