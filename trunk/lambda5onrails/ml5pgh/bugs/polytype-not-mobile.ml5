(* XXX this can be trimmed further.

   the problem is that 's' is polymorphic, below, but we require that
   it be mobile. the mobility check should not fail on unresolved
   tyvars (they should be set to some mobile type, like unit) or else
   the setting of tyvars to unit should just happen before the
   mobility check.

   actually oops: s's tyvar isn't unset here, it's just a valid
   function. we shouldn't generalize: the requirement that s be mobile
   should be considered part of the "outer context" for the purpose of
   generalization.

   (there is a simpler example of this in the dissertation)

 *)

unit
(*
    import "std.mlh"
    import "trivialdb.mlh"
*)
    infix 1 :=
    fun inline (t) :=(r, a) = primapp Set { t } (r, a)
    fun inline (t) ! r = primapp Get { t } (r)
    fun inline (t) ref a = primapp Ref { t } (a)
    datatype a list = nil | :: of a * list
    infixr ::
    extern bytecode world server
    extern val server ~ server addr
    extern val home ~ home addr

    extern val alert : string -> unit @ home

           (* do runtime.no-messages () *)

    val template-cache = ref nil

    (* exception Wiki of string *)
    
    (* XXX locks! *)
    fun update-template (s, r) =
        let
            fun find nil = nil
              | find ((x as (h, _)) :: t) = find t
        in
            ()
        end

    fun add-cache s =
        let 
            put s = s
        in
            from server get
            let 
                fun up () =
                    let 
                        (* put r = trivialdb.read s *)
                    in
                        from home
                        get update-template (s, "")
                    end : unit @ server
            in
                up ()
            end
        end : unit @ home
    
    do add-cache [asdf]
(*
    do find-insert-template [asdf]
*)
in
end
