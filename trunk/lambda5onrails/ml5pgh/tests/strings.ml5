       unit
    import "std.mlh"

    extern val alert : string -> unit @ home
    extern val alerti : int -> unit  @ home = alert

    fun renderhtml s =
        let
            datatype tok =
                NoToken
              | String of string
              | Bar
              | OLink
              | CLink

            val off = ref 0
            fun token () =
                if !off >= size s
                then NoToken
                else 
                  let
                      val start = !off
                      fun eat () =
                          if !off >= size s
                          then (alert [eat end]; String(substring(s, start, !off - start)))
                          else
                            let in
                              alerti (!off);

                              case ssub (s, !off) of
                                  (* if it is the first character, we behave
                                     differently than if we see some letters
                                     terminated by one of the special chars.
                                     (note, we know the string does not start
                                     with [[ or ]]) *)
                                  ?| => (case !off - start of
                                             0 => (off := !off + 1; Bar)
                                         | len => String(substring(s, start, len)))
                                | ?] => (case !off - start of
                                             0 => (off := !off + 1; eat ())
                                         | len => String(substring(s, start, len)))
                                | ?[ => (case !off - start of
                                             0 => (off := !off + 1; eat ())
                                         | len => String(substring(s, start, len)))
                                | c => (off := (!off + 1); eat ())
                            end

                  in
                      alert [sizecheck];
                      (* might be [[ or ]] *)
                      if !off < size s - 2
                      then 
                          let val next2 = substring(s, !off, 2)
                          in
                              alert [next2check '[next2]'];
                              if next2 seq "[["
                              then (off := !off + 2; OLink)
                              else if next2 seq "]]"
                                   then (off := !off + 2; CLink)
                                   else eat ()
                          end
                      else eat ()
                  end

            fun make () =
              let val t = token ()
              in
               alert [token];
               (case t of
                    String ss => [[ss][make ()]]
                  | Bar => [|[make()]]
                  | CLink => [["]]"][make ()]]
                  | OLink => getlink ()
                  | NoToken => [])
              end

            and getlink () =
                let 
                    fun target () =
                        (case token () of
                             String ss => [[ss][target ()]]
                           | Bar => [XXX unimplemented barlink]
                           | CLink => []
                           | NoToken => [*unclosed link*]
                           | OLink => [*link within link*])
                    val () = alert "getlink"
                    val t = target ()
                in
                    [<a href="[t]">[t]</a>[make ()]]
                end
        in
            alert [renderhtml];
            make ()
        end : string @ home

        (* XXX infinite loop *)
   do alert(renderhtml "a [[link]] yo")

(*
   extern val alerti : char -> unit @ home = alert

   do (case ssub ([asdf], 0) of
           ?a => alert "correct"
         | c => alerti c)
*)
in
end