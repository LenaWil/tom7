
val require-std = provide-std
val provide-lock = ()

(* XXX totally naive! This needs to be baked into the
   scheduler somehow so that we don't have to busy wait
   on locks...

   (actually, maybe we can do it by associating a queue
   of waiting threads with each reference, and activating
   the top one on unlock?)

   XXX would be nice to make this an abstract type using
   compilation units.. *)

(* if true, then currently locked *)
type lock = bool ref

fun new-lock () = ref false

(* if unlocked, lock and run it; otherwise, do nothing. (doesn't need
   scheduler help, but does need to be compiled as one function
   between the !test and := set so it is not interrupted. Currently
   this is the case as long as ! and := are inlined, which they are.)
   *)
fun maybe-with-lock l f =
    if !l
    then ()
    else
        let in
            l := true;
            f ();
            l := false
        end
