
#include <limits>
#include <cfloat>
#include <vector>
#include <algorithm>
#include <stdio.h>
#include <cmath>
#include <map>

using namespace std;

// #define DBL_EPSILON std::numeric_limits<double>::epsilon()
#define EPSILON FLT_EPSILON

#define INIT(s) #s, s
struct NamedEntry {
  const char *expr;
  double value;
  int count;
};

NamedEntry entries_cdouble[] = {
  { INIT(0.00000000000001), 1 },
  { INIT(1.0E-6), 1 },
  { INIT(1.0e-1), 1 },
  { INIT(1.0E-20), 1 },
  { INIT(2.0e-16), 1 },
  { INIT(1e-13), 1 },
  { INIT(1e-5), 1 },
  { INIT(1.0E-32), 1 },
  { INIT(-1e10), 1 },
  { INIT(.00000000000000000000001), 1 },
  { INIT(1e-3), 1 },
  { INIT(1.776356839400251e-15), 1 },
  { INIT(1.00e-07), 1 },
  { INIT(.02), 1 },
  { INIT(1.0e-50), 1 },
  { INIT(2e-4), 1 },
  { INIT(0.33), 1 },
  { INIT(0.9), 1 },
  { INIT(.000001), 1 },
  { INIT(DBL_MIN), 1 },
  { INIT(1.0E-10), 1 },
  { INIT(EPSILON * EPSILON), 1 },
  { INIT(1.0e-8), 1 },
  { INIT(1.192092896e-06), 1 },
  { INIT(5.0), 1 },
  { INIT(1.0E-100), 1 },
  { INIT(1e-7), 1 },
  { INIT(1e-4), 1 },
  { INIT(1e-100), 2 },
  { INIT(1e-10f), 2 },
  { INIT(1e-9), 2 },
  { INIT(1.0e-10), 2 },
  { INIT(1.0E-200), 2 },
  { INIT(0.00000001f), 2 },
  { INIT(1.0E-300), 2 },
  { INIT(1.0e-6), 2 },
  { INIT(1e-20), 2 },
  { INIT(1.0E-14), 2 },
  { INIT(1.0E-16), 2 },
  { INIT(5.0E-16), 2 },
  { INIT(1.E-100), 2 },
  { INIT(1.0E-290), 2 },
  { INIT(2e-31), 2 },
  { INIT((1.0/65536.0)), 2 },
  { INIT(0.005), 2 },
  { INIT(.0000001), 2 },
  { INIT(1e-12 ), 2 },
  { INIT(.1192e-06), 2 },
  { INIT(1e-14), 2 },
  { INIT(2.0E-16), 2 },
  { INIT(2.2204460492503131E-16), 2 },
  { INIT(1E-6), 3 },
  { INIT(1.0e-5), 3 },
  { INIT(1.e-6), 3 },
  { INIT(1e-12), 4 },
  { INIT(0.00000000001), 4 },
  { INIT(0.000000001), 4 },
  { INIT(1e-8), 4 },
  { INIT(0.001f), 5 },
  { INIT(0.1), 5 },
  { INIT(.00001), 6 },
  { INIT(1.0E-10), 6 },
  { INIT(0.015625), 6 },
  { INIT(1.0), 6 },
  { INIT(0.0000000001), 7 },
  { INIT(1e-10), 7 },
  { INIT(1.5), 8 },
  { INIT(1.0E-12), 9 },
  { INIT(0.00000001), 9 },
  { INIT(1.0e-2), 10 },
  { INIT(1e-21), 10 },
  { INIT(1e-300), 11 },
  { INIT(4.37114e-05), 12 },
  { INIT(0.001), 13 },
  { INIT(0.0001), 13 },
  { INIT(1.0E-4), 16 },
  { INIT(0.01), 16 },
  { INIT(0.0000001), 23 },
  { INIT(0.000001), 23 },
  { INIT(1e-6), 28 },
  { INIT(EPSILON), 45 },
  { INIT(1e-12), 57 },
  { INIT(1e-15), 80 },
  { INIT(DBL_EPSILON), 88 },
  { INIT(0.00001), 207 },
  { INIT(1e-30), 303 },
};

NamedEntry entries_cfloat[] = {
  { INIT(1e-6), 1 },
  { INIT(1e-6), 1 },
  { INIT(0.0001), 1 },
  { INIT(2e-7), 1 },
  { INIT(1.0e-5), 1 },
  { INIT(0.0005f), 1 },
  { INIT(FLT_EPSILON), 1 },
  { INIT(1e-10f), 1 },
  { INIT(((float)1e-10)), 1 },
  { INIT(1.19209289550781250000e-7F), 1 },
  { INIT(1.0E-6f), 1 },
  { INIT(1e-5), 1 },
  { INIT(0.001f), 1 },
  { INIT(1e-30), 1 },
  { INIT(5E-4), 1 },
  { INIT(0.01), 1 },
  { INIT(1.0E-10f), 1 },
  { INIT(1.0e-4f), 2 },
  { INIT(216.0 / 24389.0), 2 },
  { INIT(1.0e-15), 2 },
  { INIT(1.0e-2), 2 },
  { INIT(1e-8f), 2 },
  { INIT(0.0f), 2 },
  { INIT(1.0e-6), 2 },
  { INIT(1.0), 2 },
  { INIT(0.1), 2 },
  { INIT(0.00000000001f), 2 },
  { INIT(.0000001), 2 },
  { INIT(1.0e-12), 2 },
  { INIT(5E-4f), 2 },
  { INIT(216.0f/24389.0f), 2 },
  { INIT(1.0e-10), 2 },
  { INIT(0.4), 2 },
  { INIT(0.03), 2 },
  { INIT(1e-12), 3 },
  { INIT(.0001f), 3 },
  { INIT(0.001), 4 },
  { INIT(0.000001f), 4 },
  { INIT(0.000001), 5 },
  { INIT(0.0001f), 6 },
  { INIT(1e-7f), 10 },
  { INIT(0.0001f), 18 },
  { INIT(0.001f), 21 },
  { INIT(1e-6), 43 },
  { INIT(1e-4f), 52 },
  { INIT(0.00001), 52 },
  { INIT(216.0f / 24389.0f), 53 },
  { INIT(0.00001f), 54 },
  { INIT(FLT_EPSILON * 2.0f), 54 },
  { INIT(0.0000001f), 63 },
  { INIT(1.0F / 256.0F), 206 },
  { INIT(10e-3f), 433 },
};

NamedEntry entries_cppdouble[] = {
  { INIT(1e-12), 1 },
  { INIT(216./24389.), 1 },
  { INIT(216.L/24389.L), 1 },
  { INIT(1.0e-12), 2 },
  { INIT(numeric_limits<double>::epsilon()), 4 },
  { INIT(pow(10,-13)), 2 },
  { INIT(8.7 * pow(10,-4)), 1 },
  { INIT(1e-6), 2 },
  { INIT(1e-13), 1 },
  { INIT(0.00000000001), 1 },
  { INIT(0.00000000001f), 1 },
  { INIT(1.0e-16), 1 },
  { INIT(100 * std::numeric_limits<double>::epsilon()), 1 },
  { INIT(1.e-7), 1 },
  { INIT(0.005), 1 },
  { INIT(.25), 1 },
  { INIT(1.11e-16), 1 },
  { INIT(0.000001f), 1 },
  { INIT(1e-24), 1 },
  { INIT(1e-5d), 1 },
  { INIT(1.e-12), 1 },
  { INIT(10e-10), 1 },
  { INIT(1.0e-4), 1 },
  { INIT(2.0 * std::numeric_limits<double>::epsilon()), 1 },
  { INIT(1.0e-14), 1 },
  { INIT(1E-7), 1 },
  { INIT(16.0 * std::numeric_limits<double>::epsilon()), 1 },
  { INIT(1e-15), 1 },
  { INIT(0.5), 1 },
  { INIT(.05), 1 },
  { INIT(0.0), 1 },
  { INIT(10e-5), 1 },
  { INIT(.0000001), 1 },
  { INIT(1E-6), 1 },
  { INIT(10e-250), 1 },
  { INIT(1e-2), 1 },
  { INIT(0.05), 2 },
  { INIT(10e-120), 2 },
  { INIT(1.000), 2 },
  { INIT(10E-4), 2 },
  { INIT(1.e-9), 2 },
  { INIT(1.e-15), 2 },
  { INIT(1.0e-10), 2 },
  { INIT(0.0001f), 2 },
  { INIT(1E-5), 2 },
  { INIT(0.00001f), 2 },
  { INIT(1.e-13), 2 },
  { INIT(8.854187827e-12), 2 },
  { INIT(2.0e-4), 2 },
  { INIT(.00001), 2 },
  { INIT(0.03), 2 },
  { INIT(1.0E-4), 2 },
  { INIT(8.854187817e-12), 3 },
  { INIT(1e-14), 3 },
  { INIT(0.1), 3 },
  { INIT(0.010318), 3 },
  { INIT(10e-6), 3 },
  { INIT(0.000000001), 4 },
  { INIT(0.08), 4 },
  { INIT(100. * FLT_EPSILON), 4 },
  { INIT(1e-300), 4 },
  { INIT(0.0), 4 },
  { INIT(0.00001), 4 },
  { INIT(0.02), 4 },
  { INIT(.0001), 4 },
  { INIT(1e-5), 5 },
  { INIT(1e-16), 5 },
  { INIT(1e-06), 5 },
  { INIT(1E-4), 5 },
  { INIT(1.0), 6 },
  { INIT(1.0e-10 ), 6 },
  { INIT(.001), 6 },
  { INIT(1E-10), 6 },
  { INIT(1e-6), 7 },
  { INIT(1.0e-9), 7 },
  { INIT(0.00000001), 7 },
  { INIT(1.0e-8), 8 },
  { INIT(1.0/65536.0), 8 },
  { INIT(1.e-3), 8 },
  { INIT(0.001), 8 },
  { INIT(1.0e-6), 9 },
  { INIT(1e-9), 9 },
  { INIT(+1.e-10), 9 },
  { INIT(1.e-6), 10 },
  { INIT(1.0e-12), 13 },
  { INIT(1e-8), 14 },
  { INIT(1e-7), 14 },
  { INIT(2.*2.2250738585072014e-308), 15 },
  { INIT(2.*std::numeric_limits<double>::epsilon()), 15 },
  { INIT(1E-06), 15 },
  { INIT(1e-12), 16 },
  { INIT(DBL_EPSILON), 18 },
  { INIT(1.e-8), 19 },
  { INIT(1.e-4), 20 },
  { INIT(0.000001), 21 },
  { INIT(0.0001), 22 },
  { INIT(0.01), 23 },
  { INIT(1.0e-7), 27 },
  { INIT(1e-4), 28 },
  { INIT(0.000000000001), 30 },
  { INIT(1e-10), 37 },
  { INIT(1e-3), 40 },
  { INIT(std::numeric_limits<double>::epsilon()), 45 },
  { INIT(1e-6), 73 },
  { INIT(0.00001), 81 },
  { INIT(1.e-5), 84 },
  { INIT(1E-14), 97 },
  { INIT(0.0000001), 146 },
  { INIT(1e-16), 1 },
  { INIT(1e-6), 1 },
  { INIT(1e-12), 1 },
  { INIT(0.00000000000000000001), 2 },
  { INIT(1e-10), 3 },
  { INIT(0.0000001), 3 },
  { INIT(0.00001), 6 },
};

static bool CompareByFirst(const NamedEntry &a, const NamedEntry &b) {
  return a.value < b.value;
}

#define entries entries_cfloat
int main () {
  map<double, int> all;
  for (int i = 0; i < sizeof (entries) / sizeof (NamedEntry); i++) {
    all[entries[i].value] += entries[i].count;
    if (entries[i].value == 0) {
      printf("Actually 0: %s\n", entries[i].expr);
    } else if (entries[i].value < 0) {
      printf("Actually negative: %s\n", entries[i].expr);
    }
  }
  
  // std::sort(all.begin(), all.end(), &CompareByFirst);
  for (map<double, int>::const_iterator it = all.begin();
       it != all.end();
       ++it) {
    printf("%f\t%f\t%d\n", log(it->first), it->first, it->second);
  }
}
