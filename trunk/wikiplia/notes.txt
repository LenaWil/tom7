
Basic idea.

== Runtime ==

The runtime is the only part of the system that cannot be edited by
users. It consists minimally of a web server that gets requests (urls)
from the user and invokes some kind of execution engine to produce
output (web pages).


== Strategy ==

One way to do this would be to
 * implement a generic wiki system
 * use the wiki to store the source code of the wiki
 * use the wiki to store the source code of the programming language implementation
 * allow editing of anything
 * whenever doing wiki things, use the newest source code of the wiki
 * whenever running a program, use the newest source code of the program
   running within the 'last working interpreter' (LWI).

So basically the RT has some web connectivity and a notion of the LWI, which is what
is launched when a URL is requested. The RT must also expose a way of installing a
new LWI, as some kind of "byte code." We also need to provide basic functionality that
is needed to write the target application. One useful primitive would be the ability
to store/retrieve database keys. We should provide

   insert : key -> data -> timestamp
   head : key -> data
   read : key -> timestamp -> data

The idea is that the database has a "history"; we can fetch the
current "version" of some key with head, or we can read the version as
of some timestamp with "read". Timestamps are global to the repository
like in subversion.

 (Perhaps we can implement static and dynamic scope this way? Static scope
  corresponds to a 'read' where dynamic corresponds to a 'head')

It is impossible to modify data, only insert a "new version".
(Do we need anything like branching?)


== Notes.. ==

Reflections on trusting trust: How can your programming language
implementation be truly "free software" if it is a bootstrapping compiler?
(myself and a friend both make the same change to the compiler to add
 a string escape sequence \k with different meanings, and converge on
 the same source code but different local binaries)

We preserve the entire history of computation for GFDL compliance.


== Variable binding ==

One of the trickier things in compiling to the Bytecode language is
that it does not support any notion of variable binding. The only
thing that we have available to simulate it with is the database.
Because the database keeps history, we can just bind a variable by
inserting the value using the variable name as the key. A "global"
variable is easily achieved by always reading the "head" version of it
(rebinding is assignment). Shadowing is achieved by keeping track of
the current scope, which is a database version.

  let x = 10
  in
    .. x ..        <- database version 1
    let x = 20
    in
       .. x ..     <- database version 2
    end
    .. x ..        <- database version 1
  end

So to look up a variable we just need to know the current database
version. We can keep this in a stack that is stored in an imperative
global variable "stack".

So, to implement


  (let (x exp)
   .. body)

we compile this as

  (progn
    ; pushes the new scope (dB version returned by insert "x")
    ; onto the global stack
    (insert "stack" (list
                     (insert "x" exp)
                     (head "stack")))
    
    ; ... body ...
    ; to translate an occurrence 'x':
    ; read from the version at the top of the stack
    (read "x" (car (head "stack")))


 ... oops, would need branches to do it this way. (When reading the
 environment from a closure and then running that function, we want
 new bindings to not go at the head of the trunk, but at the head
 of that branch. Otherwise when we make a binding we'll just restore
 all variables to their newest versions.)


Let's instead just support let primitively.
