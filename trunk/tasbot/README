 TASBOT                                     Tom 7         10 Apr 2013

 Experimental code for automating the play of NES games.
 This directory contains some false starts and the playfun and learnfun
 algorithms, which are described here

   http://tom7.org/mario/

 The intended platform is 64-bit windows 7. There's no windows-specific
 stuff here, but compiling in this era is a nightmare and so I don't
 expect it to work straightforwardly on other platforms. See HACKING
 for my notes on compiling. (For what it's worth, compiling on linux
 should be less painful but I've done none of the work there.)

 The fceu subdirectory is the fork of FCEUX. I deleted a bunch of
 stuff from it, and made it compile cleanly under 64-bit mingw for
 x64. It is licensed under the GPL (see fceu/COPYING), including my
 modifications.

 Despite depending on SDL (for networking) this is currently a
 headless compile; no graphics or sound or input. It compiles for me
 with the makefile I built, after installing the cygwin packages like
 x86_64-w64-mingw32-g++ (don't get the i686 ones; I hear they are a
 trap!). Make sure you get libz since it's required by this. Follow
 the instructions on http://mingw-w64.sourceforge.net/ to make sure
 that it's running the right binary (this is all so very confusing),
 but I installed via cygwin and that worked and so that was +1 for
 cygwin.


 For most of these programs you need to make modifications to the
 source code (e.g. game.h) to set some constants, like what game and
 what movie you want to learn:

 tasbot   - A*-ish search for solutions to games. Needs a hand-written
            objective function. Very slow.

 learnfun - learns a lexicographic ordering of RAM values, as well as
            capturing input motifs, that can be used to automatically
            try to play the game (with playfun)

 playfun  - plays the game given the output of learnfun. More or less
            works for "easy" games like Super Mario Bros.

