Stuff I should be able to get rid of:

 - I've been compiling with -g instead of -O3 for quite a while.
   Do a comprehensive test to make sure it's okay!

 - ines.cpp "trainerpoo"
 - file wrappers can be massively simplified
 - file archive support
 - auto-fire
 - proper in-memory treatment of battery backed saves. lots of
   red herrings here! also, it leaks file descriptors.
 - FCEUI_Initialize calls srand -- what is using random numbers?
 - NSF code in mapper.h and the uncalled functions therein?

      Still to objectify:

      emulator.cc
      input/*
      boards/*
      mappers/*

      A little left over in:
      ines.cc

 - boards/ should be classes, only one of which is actually present
   in the FC object. Maybe they could derive from cartinfo (or equivalent).
   Some boards are based off of others, especially MMC3 but also MMC1.

 - DECLFR, DECLFW

 - is "moo" defined? mappers/61.cc ifdefs it

Memory todo:
 - Need to check that various objects are actually having their Free or Kill
   methods called, or roll those into the destructors, etc.

Cleanup to do:
 - There are some symbols that are both #defined (e.g. ines.h) and
   declared, maybe with #undef before like in mmc3.cc. So confusing!
 - clang format on the worst offenders
 - NULL -> nullptr everywhere
 - (void) args
 - Common pattern in boards/* is to declare WRAMSIZE as a static
   variable but always set it to a constant.
 - Get rid of -Wno-write-strings in build.
 - CHECKs in Zapper

Surprisingly necessary:
 - crc32 since ines.cc has a table of games and their CRCs.
 - cart md5ing
 - md5 in FECUGI; note I'm using md5 for RamChecksum though
    - If this gets threaded to cartinfo, we also need it
      for example for hack checks in onebus.cc


Possible performance improvements:
 - Can the ZNTable be replaced with a computation on the value itself?
   See my comment in x6502.cc.

 - ppulut2 is just a bit shift of ppulut1; bette for cache to just
   compute it?
 
 - Is it possible to remove the indirection when reading/writing memory,
   perhaps in a special case? Currently ARead is populated with a bunch
   of function pointers (including special regions installed by various
   mappers and cart types.) Could maybe be replaced with a single function
   (inlined into x6502) per mapper configuration.

 - JIT or AOT compile x6502 code to x86 and optimize.

Notes:
"CDLogger" is "code data logger", and I have deemed it unnecessary

Helper snippets:

# alias files='find . -type f | grep -v .svn | grep -v ".o$"'
alias files="/bin/find . -type f | grep -v roms/ | grep -v roms_crash/ | grep -v .svn | grep -v '.nes$' | grep -v '.exe$' | grep -v '.o$'"
(defun find-mentions () 
 (interactive "")
 (let ((sym (thing-at-point 'symbol)))
    (message sym)
    	     ;; TODO: version that uses \\b here around sym for word
	     ;; boundaries only (like if there's a prefix)
    (let ((cmd (concat "bash -c \"grep '"
	                sym 
	   	        "' `/bin/find . -type f | grep -v roms/ | grep -v clean_ | grep -v roms_crash/ | grep -v .svn | grep -v '.nes$' | grep -v '.exe$' | grep -v '.o$'`\"")))
      (message "%s" cmd)
        (let ((res (shell-command-to-string cmd)))
           (message "%s" (concat cmd "\n" res))
        )
    )    
 )
)

// (global-set-key "\C-xm" 'find-mentions)

(defun insert-fceu ()
  (interactive "")
  (save-excursion  (insert "fceulib__.state->"))
)

(global-set-key "\C-xx" 'insert-fceu)

(defun set-cart-rectangle ()
  (interactive "")
  (string-rectangle (region-beginning) (region-end) "fceulib__cart.")
)

(global-set-key "\C-xw" 'set-cart-rectangle)

